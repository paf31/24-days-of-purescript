# 7. `pulp`

Today I will show how to use Bodil Stokke's `pulp` tool to get up and running quickly with PureScript.

`pulp` is a command line tool which automates a number of common PureScript tasks, such as creating a new project, pulling Bower dependencies, and generating Javascript and documentation. It assumes a number of simple conventions, which enable a very simple command line interface.

Get started by initializing a new `pulp` project on the command line:

```text
$ pulp init
* Generating project skeleton in purescript/pulp-test
```

At this point, the current directory will contain a `src` directory, for source files, a `test` directory for tests, and a `bower.json` file, where you can specify your PureScript library dependencies.

To see the list of commands available, type `pulp` with no command at the shell:

```text
$ pulp
No command specified.

Available commands:

  init 	- Generate an example PureScript project
  install 	- Download and install project dependencies
  build 	- Build the project
  test 	- Run project tests
  browserify 	- Produce a deployable bundle using Browserify
  run 	- Compile and run the project
  docgen 	- Generate project documentation
  psci 	- Launch a PureScript REPL configured for the project
```

Try building the project in its default state:

```text
$ pulp build
* Building project in purescript/pulp-test
* Build successful.
```

The source modules will be compiled and placed in the `output` directory. We also have the option of running the tool in watch mode, by using `pulp build -w`. This will cause the project to be rebuilt when the sources change. In fact, all of the `pulp` commands can be run in watch mode by using the `-w` flag.

Now try running the compiled sources, by using `pulp run`:

```text
$ pulp run
* Building project in purescript/pulp-test
* Build successful.
Hello sailor!
```

We can also compile and run the tests using `pulp test`:

```text
$ pulp test
* Building project in purescript/pulp-test
* Build successful. Running tests...
You should add some tests.
* Tests OK.
```

Other options include the `browserify` command, which will generate JavaScript for the browser, and the `pulp` command which will load your sources into `psci`.

Let's add some code to `src/Main.purs`, and use `pulp psci` to test our library:

```purescript
module Main where

import Debug.Trace

greet :: Boolean -> String -> String
greet beMerry holiday
  | beMerry   = "Merry " <> holiday <> "!"
  | otherwise = "Happy " <> holiday <> "."

main = do
  trace $ greet true "Christmas"
```

Using `pulp run` should generate a season-appropriate greeting on the command line, or we can use `pulp psci` to test our function in isolation in `psci`:

```text
$ pulp psci
 ____                 ____            _       _   
|  _ \ _   _ _ __ ___/ ___|  ___ _ __(_)_ __ | |_
| |_) | | | | '__/ _ \___ \ / __| '__| | '_ \| __|
|  __/| |_| | | |  __/___) | (__| |  | | |_) | |_
|_|    \__,_|_|  \___|____/ \___|_|  |_| .__/ \__|
                                       |_|        

:? shows help

Expressions are terminated using Ctrl+D
> Main.greet false "Easter"

"Happy Easter."
```

Hopefully, this has shown that `pulp` is a great tool which can help you to get up and running with PureScript very quickly. In a future post, I will show we might get started with `pulp test`, by using one of PureScript's testing libraries to modify `test/Main.purs`.
