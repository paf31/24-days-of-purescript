(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function returnE(a) {  return function() {    return a;  };};
function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
function runPure(f) {  return f();};
function untilE(f) {  return function() {    while (!f());    return {};  };};
function whileE(f) {  return function(a) {    return function() {      while (f()) {        a();      }      return {};    };  };};
function forE(lo) {  return function(hi) {    return function(f) {      return function() {        for (var i = lo; i < hi; i++) {          f(i)();        }      };    };  };};
function foreachE(as) {  return function(f) {    return function() {      for (var i = 0; i < as.length; i++) {        f(as[i])();      }    };  };};
var monadEff = new Prelude.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Prelude.Bind(bindE, function () {
    return applyEff;
});
var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
    return functorEff;
});
var applicativeEff = new Prelude.Applicative(function () {
    return applyEff;
}, returnE);
var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
module.exports = {
    applicativeEff: applicativeEff, 
    applyEff: applyEff, 
    bindE: bindE, 
    bindEff: bindEff, 
    forE: forE, 
    foreachE: foreachE, 
    functorEff: functorEff, 
    monadEff: monadEff, 
    returnE: returnE, 
    runPure: runPure, 
    untilE: untilE, 
    whileE: whileE
};

},{"Prelude":6}],2:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function unsafeForeignProcedure(args) {  return function (stmt) {    return Function(wrap(args.slice()))();    function wrap() {      return !args.length ? stmt : 'return function (' + args.shift() + ') { ' + wrap() + ' };';    }  };};
var unsafeForeignFunction = function (args) {
    return function (expr) {
        return unsafeForeignProcedure(args)("return " + (expr + ";"));
    };
};
module.exports = {
    unsafeForeignFunction: unsafeForeignFunction, 
    unsafeForeignProcedure: unsafeForeignProcedure
};

},{"Prelude":6}],3:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Foreign_EasyFFI = require("Data.Foreign.EasyFFI");
var Prelude = require("Prelude");
function AttrValue() {

};
function Appendable(append) {
    this.append = append;
};
function Existing(attr, attr$prime, attr$prime$prime, remove, style, style$prime, style$prime$prime, text, text$prime, text$prime$prime) {
    this.attr = attr;
    this["attr'"] = attr$prime;
    this["attr''"] = attr$prime$prime;
    this.remove = remove;
    this.style = style;
    this["style'"] = style$prime;
    this["style''"] = style$prime$prime;
    this.text = text;
    this["text'"] = text$prime;
    this["text''"] = text$prime$prime;
};
var text$prime$prime = function (dict) {
    return dict["text''"];
};
var text$prime = function (dict) {
    return dict["text'"];
};
var text = function (dict) {
    return dict.text;
};
var style$prime$prime = function (dict) {
    return dict["style''"];
};
var style$prime = function (dict) {
    return dict["style'"];
};
var style = function (dict) {
    return dict.style;
};
var remove = function (dict) {
    return dict.remove;
};
var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
var rootSelect = ffi([ "selector", "" ])("d3.select(selector)");
var rootSelectAll = ffi([ "selector", "" ])("d3.selectAll(selector)");
var select = ffi([ "selector", "selection", "" ])("selection.select(selector)");
var selectAll = ffi([ "selector", "selection", "" ])("selection.selectAll(selector)");
var transition = function (__dict_Existing_0) {
    return ffi([ "selection", "" ])("selection.transition()");
};
var unsafeAppend = ffi([ "tag", "selection", "" ])("selection.append(tag)");
var unsafeAttr = function (__dict_AttrValue_1) {
    return ffi([ "key", "val", "selection", "" ])("selection.attr(key, val)");
};
var unsafeAttr$prime = function (__dict_AttrValue_2) {
    return ffi([ "key", "val", "selection", "" ])("selection.attr(key, val)");
};
var unsafeAttr$prime$prime = function (__dict_AttrValue_3) {
    return ffi([ "key", "val", "selection", "" ])("selection.attr(key, function (d, i) { return val(d)(i); })");
};
var unsafeRemove = ffi([ "selection", "" ])("selection.remove()");
var unsafeStyle = ffi([ "key", "val", "selection", "" ])("selection.style(key, val)");
var unsafeStyle$prime = ffi([ "key", "val", "selection", "" ])("selection.style(key, val)");
var unsafeStyle$prime$prime = ffi([ "key", "val", "selection", "" ])("selection.style(key, function (d, i) { return val(d)(i); })");
var unsafeText = ffi([ "text", "selection", "" ])("selection.text(text)");
var unsafeText$prime = ffi([ "text", "selection", "" ])("selection.text(text)");
var unsafeText$prime$prime = ffi([ "text", "selection", "" ])("selection.text(function (d, i) { return text(d)(i); })");
var exit = ffi([ "update", "" ])("update.exit()");
var existingUpdate = new Existing(function (__dict_AttrValue_4) {
    return unsafeAttr(__dict_AttrValue_4);
}, function (__dict_AttrValue_5) {
    return unsafeAttr$prime(__dict_AttrValue_5);
}, function (__dict_AttrValue_6) {
    return unsafeAttr$prime$prime(__dict_AttrValue_6);
}, unsafeRemove, unsafeStyle, unsafeStyle$prime, unsafeStyle$prime$prime, unsafeText, unsafeText$prime, unsafeText$prime$prime);
var existingTransition = new Existing(function (__dict_AttrValue_7) {
    return unsafeAttr(__dict_AttrValue_7);
}, function (__dict_AttrValue_8) {
    return unsafeAttr$prime(__dict_AttrValue_8);
}, function (__dict_AttrValue_9) {
    return unsafeAttr$prime$prime(__dict_AttrValue_9);
}, unsafeRemove, unsafeStyle, unsafeStyle$prime, unsafeStyle$prime$prime, unsafeText, unsafeText$prime, unsafeText$prime$prime);
var existingSelection = new Existing(function (__dict_AttrValue_10) {
    return unsafeAttr(__dict_AttrValue_10);
}, function (__dict_AttrValue_11) {
    return unsafeAttr$prime(__dict_AttrValue_11);
}, function (__dict_AttrValue_12) {
    return unsafeAttr$prime$prime(__dict_AttrValue_12);
}, unsafeRemove, unsafeStyle, unsafeStyle$prime, unsafeStyle$prime$prime, unsafeText, unsafeText$prime, unsafeText$prime$prime);
var enter = ffi([ "update", "" ])("update.enter()");
var duration$prime$prime = ffi([ "duration", "transition", "" ])("transition.duration(function (d, i) { return duration(d)(i); })");
var duration$prime = ffi([ "duration", "transition", "" ])("transition.duration(duration)");
var duration = ffi([ "duration", "transition", "" ])("transition.duration(duration)");
var delay$prime$prime = ffi([ "delay", "transition", "" ])("transition.delay(function (d, i) { return delay(d)(i); })");
var delay$prime = ffi([ "delay", "transition", "" ])("transition.delay(delay)");
var delay = ffi([ "delay", "transition", "" ])("transition.delay(delay)");
var bind = ffi([ "array", "selection", "" ])("selection.data(array)");
var attrValString = new AttrValue();
var attrValNumber = new AttrValue();
var attr$prime$prime = function (dict) {
    return dict["attr''"];
};
var attr$prime = function (dict) {
    return dict["attr'"];
};
var attr = function (dict) {
    return dict.attr;
};
var appendableUpdate = new Appendable(unsafeAppend);
var appendableSelection = new Appendable(unsafeAppend);
var appendableEnter = new Appendable(unsafeAppend);
var append = function (dict) {
    return dict.append;
};
module.exports = {
    Appendable: Appendable, 
    AttrValue: AttrValue, 
    Existing: Existing, 
    append: append, 
    appendableEnter: appendableEnter, 
    appendableSelection: appendableSelection, 
    appendableUpdate: appendableUpdate, 
    attr: attr, 
    "attr'": attr$prime, 
    "attr''": attr$prime$prime, 
    attrValNumber: attrValNumber, 
    attrValString: attrValString, 
    bind: bind, 
    delay: delay, 
    "delay'": delay$prime, 
    "delay''": delay$prime$prime, 
    duration: duration, 
    "duration'": duration$prime, 
    "duration''": duration$prime$prime, 
    enter: enter, 
    existingSelection: existingSelection, 
    existingTransition: existingTransition, 
    existingUpdate: existingUpdate, 
    exit: exit, 
    remove: remove, 
    rootSelect: rootSelect, 
    rootSelectAll: rootSelectAll, 
    select: select, 
    selectAll: selectAll, 
    style: style, 
    "style'": style$prime, 
    "style''": style$prime$prime, 
    text: text, 
    "text'": text$prime, 
    "text''": text$prime$prime, 
    transition: transition
};

},{"Data.Foreign.EasyFFI":2,"Prelude":6}],4:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Foreign_EasyFFI = require("Data.Foreign.EasyFFI");
var Prelude = require("Prelude");
var $dot$dot$dot = Prelude.flip(Prelude["$"]);
var $dot$dot = Prelude[">>="];
var min = Data_Foreign_EasyFFI.unsafeForeignFunction([ "fn", "data" ])("d3.min(data, fn)");
var max = Data_Foreign_EasyFFI.unsafeForeignFunction([ "fn", "data" ])("d3.max(data, fn)");
module.exports = {
    "..": $dot$dot, 
    "...": $dot$dot$dot, 
    max: max, 
    min: min
};

},{"Data.Foreign.EasyFFI":2,"Prelude":6}],5:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Graphics_D3_Selection = require("Graphics.D3.Selection");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Graphics_D3_Util = require("Graphics.D3.Util");
var array = [ {
    label: "Nice", 
    count: 92
}, {
    label: "Naughty", 
    count: 8
} ];
var main = function __do() {
    var _0 = Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Selection.rootSelect(".chart"))(Graphics_D3_Selection.selectAll("g")))(Graphics_D3_Selection.bind(array)))(Graphics_D3_Selection.enter))(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableEnter)("g"))();
    Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableSelection)("rect")(_0))(Graphics_D3_Selection["attr''"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("x")(function (_) {
        return function (i) {
            return i * 100;
        };
    })))(Graphics_D3_Selection["attr'"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("y")(function (o) {
        return 100 - o.count;
    })))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("width")(98)))(Graphics_D3_Selection["attr'"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("height")(function (o) {
        return o.count;
    })))(Graphics_D3_Selection.style(Graphics_D3_Selection.existingSelection)("stroke-width")("1")))(Graphics_D3_Selection.style(Graphics_D3_Selection.existingSelection)("stroke")("rgb(0,255,0)"))();
    return Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableSelection)("text")(_0))(Graphics_D3_Selection["attr''"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("x")(function (_) {
        return function (i) {
            return i * 100 + 20;
        };
    })))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("y")(120)))(Graphics_D3_Selection["text'"](Graphics_D3_Selection.existingSelection)(function (o) {
        return o.label + (" (" + (Prelude.show(Prelude.showNumber)(o.count) + "%)"));
    }))();
};
module.exports = {
    array: array, 
    main: main
};

},{"Control.Monad.Eff":1,"Graphics.D3.Selection":3,"Graphics.D3.Util":4,"Prelude":6}],6:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Unit = {
    create: function (value) {
        return value;
    }
};
function LT() {

};
LT.value = new LT();
function GT() {

};
GT.value = new GT();
function EQ() {

};
EQ.value = new EQ();
function Semigroupoid($less$less$less) {
    this["<<<"] = $less$less$less;
};
function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
    this.id = id;
};
function Show(show) {
    this.show = show;
};
function Functor($less$dollar$greater) {
    this["<$>"] = $less$dollar$greater;
};
function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
    this["<*>"] = $less$times$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
function Applicative(__superclass_Prelude$dotApply_0, pure) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.pure = pure;
};
function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
    this[">>="] = $greater$greater$eq;
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
};
function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
};
function Num($percent, $times, $plus, $minus, $div, negate) {
    this["%"] = $percent;
    this["*"] = $times;
    this["+"] = $plus;
    this["-"] = $minus;
    this["/"] = $div;
    this.negate = negate;
};
function Eq($div$eq, $eq$eq) {
    this["/="] = $div$eq;
    this["=="] = $eq$eq;
};
function Ord(__superclass_Prelude$dotEq_0, compare) {
    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
    this.compare = compare;
};
function Bits($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
    this[".&."] = $dot$amp$dot;
    this[".^."] = $dot$up$dot;
    this[".|."] = $dot$bar$dot;
    this.complement = complement;
    this.shl = shl;
    this.shr = shr;
    this.zshr = zshr;
};
function BoolLike($amp$amp, not, $bar$bar) {
    this["&&"] = $amp$amp;
    this.not = not;
    this["||"] = $bar$bar;
};
function Semigroup($less$greater) {
    this["<>"] = $less$greater;
};
function cons(e) {  return function(l) {    return [e].concat(l);  };};
function showStringImpl(s) {  return JSON.stringify(s);};
function showNumberImpl(n) {  return n.toString();};
function showArrayImpl(f) {  return function(xs) {    var ss = [];    for (var i = 0, l = xs.length; i < l; i++) {      ss[i] = f(xs[i]);    }    return '[' + ss.join(',') + ']';  };};
function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
function numNegate(n) {  return -n;};
function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
function numShl(n1) {  return function(n2) {    return n1 << n2;  };};
function numShr(n1) {  return function(n2) {    return n1 >> n2;  };};
function numZshr(n1) {  return function(n2) {    return n1 >>> n2;  };};
function numAnd(n1) {  return function(n2) {    return n1 & n2;  };};
function numOr(n1) {  return function(n2) {    return n1 | n2;  };};
function numXor(n1) {  return function(n2) {    return n1 ^ n2;  };};
function numComplement(n) {  return ~n;};
function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
function boolNot(b) {  return !b;};
function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
var $bar$bar = function (dict) {
    return dict["||"];
};
var $greater$greater$eq = function (dict) {
    return dict[">>="];
};
var $eq$eq = function (dict) {
    return dict["=="];
};
var $less$greater = function (dict) {
    return dict["<>"];
};
var $less$less$less = function (dict) {
    return dict["<<<"];
};
var $greater$greater$greater = function (__dict_Semigroupoid_0) {
    return function (f) {
        return function (g) {
            return $less$less$less(__dict_Semigroupoid_0)(g)(f);
        };
    };
};
var $less$times$greater = function (dict) {
    return dict["<*>"];
};
var $less$dollar$greater = function (dict) {
    return dict["<$>"];
};
var $less$hash$greater = function (__dict_Functor_1) {
    return function (fa) {
        return function (f) {
            return $less$dollar$greater(__dict_Functor_1)(f)(fa);
        };
    };
};
var $colon = cons;
var $div$eq = function (dict) {
    return dict["/="];
};
var $div = function (dict) {
    return dict["/"];
};
var $dot$bar$dot = function (dict) {
    return dict[".|."];
};
var $dot$up$dot = function (dict) {
    return dict[".^."];
};
var $dot$amp$dot = function (dict) {
    return dict[".&."];
};
var $minus = function (dict) {
    return dict["-"];
};
var $plus$plus = function (__dict_Semigroup_2) {
    return $less$greater(__dict_Semigroup_2);
};
var $plus = function (dict) {
    return dict["+"];
};
var $times = function (dict) {
    return dict["*"];
};
var $amp$amp = function (dict) {
    return dict["&&"];
};
var $percent = function (dict) {
    return dict["%"];
};
var $dollar = function (f) {
    return function (x) {
        return f(x);
    };
};
var $hash = function (x) {
    return function (f) {
        return f(x);
    };
};
var zshr = function (dict) {
    return dict.zshr;
};
var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
var unit = {};
var shr = function (dict) {
    return dict.shr;
};
var showUnit = new Show(function (_10) {
    return "Unit {}";
});
var showString = new Show(showStringImpl);
var showOrdering = new Show(function (_18) {
    if (_18 instanceof LT) {
        return "LT";
    };
    if (_18 instanceof GT) {
        return "GT";
    };
    if (_18 instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match");
});
var showNumber = new Show(showNumberImpl);
var showBoolean = new Show(function (_11) {
    if (_11) {
        return "true";
    };
    if (!_11) {
        return "false";
    };
    throw new Error("Failed pattern match");
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (__dict_Show_3) {
    return new Show(showArrayImpl(show(__dict_Show_3)));
};
var shl = function (dict) {
    return dict.shl;
};
var semigroupoidArr = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var semigroupUnit = new Semigroup(function (_25) {
    return function (_26) {
        return {};
    };
});
var semigroupString = new Semigroup(concatString);
var semigroupArr = function (__dict_Semigroup_4) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
            };
        };
    });
};
var pure = function (dict) {
    return dict.pure;
};
var $$return = function (__dict_Monad_5) {
    return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
};
var otherwise = true;
var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
var not = function (dict) {
    return dict.not;
};
var negate = function (dict) {
    return dict.negate;
};
var liftM1 = function (__dict_Monad_6) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                return $$return(__dict_Monad_6)(f(_0));
            });
        };
    };
};
var liftA1 = function (__dict_Applicative_7) {
    return function (f) {
        return function (a) {
            return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
        };
    };
};
var id = function (dict) {
    return dict.id;
};
var functorArr = new Functor($less$less$less(semigroupoidArr));
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var eqUnit = new Eq(function (_14) {
    return function (_15) {
        return false;
    };
}, function (_12) {
    return function (_13) {
        return true;
    };
});
var ordUnit = new Ord(function () {
    return eqUnit;
}, function (_19) {
    return function (_20) {
        return EQ.value;
    };
});
var eqString = new Eq(refIneq, refEq);
var ordString = new Ord(function () {
    return eqString;
}, unsafeCompare);
var eqNumber = new Eq(refIneq, refEq);
var ordNumber = new Ord(function () {
    return eqNumber;
}, unsafeCompare);
var eqBoolean = new Eq(refIneq, refEq);
var ordBoolean = new Ord(function () {
    return eqBoolean;
}, function (_21) {
    return function (_22) {
        if (!_21 && !_22) {
            return EQ.value;
        };
        if (!_21 && _22) {
            return LT.value;
        };
        if (_21 && _22) {
            return EQ.value;
        };
        if (_21 && !_22) {
            return GT.value;
        };
        throw new Error("Failed pattern match");
    };
});
var $$const = function (_6) {
    return function (_7) {
        return _6;
    };
};
var $$void = function (__dict_Functor_9) {
    return function (fa) {
        return $less$dollar$greater(__dict_Functor_9)($$const(unit))(fa);
    };
};
var complement = function (dict) {
    return dict.complement;
};
var compare = function (dict) {
    return dict.compare;
};
var $less = function (__dict_Ord_11) {
    return function (a1) {
        return function (a2) {
            var _267 = compare(__dict_Ord_11)(a1)(a2);
            if (_267 instanceof LT) {
                return true;
            };
            return false;
        };
    };
};
var $less$eq = function (__dict_Ord_12) {
    return function (a1) {
        return function (a2) {
            var _268 = compare(__dict_Ord_12)(a1)(a2);
            if (_268 instanceof GT) {
                return false;
            };
            return true;
        };
    };
};
var $greater = function (__dict_Ord_13) {
    return function (a1) {
        return function (a2) {
            var _269 = compare(__dict_Ord_13)(a1)(a2);
            if (_269 instanceof GT) {
                return true;
            };
            return false;
        };
    };
};
var $greater$eq = function (__dict_Ord_14) {
    return function (a1) {
        return function (a2) {
            var _270 = compare(__dict_Ord_14)(a1)(a2);
            if (_270 instanceof LT) {
                return false;
            };
            return true;
        };
    };
};
var categoryArr = new Category(function () {
    return semigroupoidArr;
}, function (x) {
    return x;
});
var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
var eqArray = function (__dict_Eq_8) {
    return new Eq(function (xs) {
        return function (ys) {
            return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_8))(xs)(ys));
        };
    }, function (xs) {
        return function (ys) {
            return eqArrayImpl($eq$eq(__dict_Eq_8))(xs)(ys);
        };
    });
};
var ordArray = function (__dict_Ord_10) {
    return new Ord(function () {
        return eqArray(__dict_Ord_10["__superclass_Prelude.Eq_0"]());
    }, function (_23) {
        return function (_24) {
            if (_23.length === 0 && _24.length === 0) {
                return EQ.value;
            };
            if (_23.length === 0) {
                return LT.value;
            };
            if (_24.length === 0) {
                return GT.value;
            };
            if (_23.length >= 1) {
                var _277 = _23.slice(1);
                if (_24.length >= 1) {
                    var _275 = _24.slice(1);
                    var _273 = compare(__dict_Ord_10)(_23[0])(_24[0]);
                    if (_273 instanceof EQ) {
                        return compare(ordArray(__dict_Ord_10))(_277)(_275);
                    };
                    return _273;
                };
            };
            throw new Error("Failed pattern match");
        };
    });
};
var eqOrdering = new Eq(function (x) {
    return function (y) {
        return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
    };
}, function (_16) {
    return function (_17) {
        if (_16 instanceof LT && _17 instanceof LT) {
            return true;
        };
        if (_16 instanceof GT && _17 instanceof GT) {
            return true;
        };
        if (_16 instanceof EQ && _17 instanceof EQ) {
            return true;
        };
        return false;
    };
});
var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
var asTypeOf = function (_8) {
    return function (_9) {
        return _8;
    };
};
var applyArr = new Apply(function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
}, function () {
    return functorArr;
});
var bindArr = new Bind(function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
}, function () {
    return applyArr;
});
var applicativeArr = new Applicative(function () {
    return applyArr;
}, $$const);
var monadArr = new Monad(function () {
    return applicativeArr;
}, function () {
    return bindArr;
});
var ap = function (__dict_Monad_15) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                    return $$return(__dict_Monad_15)(_2(_1));
                });
            });
        };
    };
};
module.exports = {
    "#": $hash, 
    "$": $dollar, 
    "%": $percent, 
    "&&": $amp$amp, 
    "*": $times, 
    "+": $plus, 
    "++": $plus$plus, 
    "-": $minus, 
    ".&.": $dot$amp$dot, 
    ".^.": $dot$up$dot, 
    ".|.": $dot$bar$dot, 
    "/": $div, 
    "/=": $div$eq, 
    ":": $colon, 
    "<": $less, 
    "<#>": $less$hash$greater, 
    "<$>": $less$dollar$greater, 
    "<*>": $less$times$greater, 
    "<<<": $less$less$less, 
    "<=": $less$eq, 
    "<>": $less$greater, 
    "==": $eq$eq, 
    ">": $greater, 
    ">=": $greater$eq, 
    ">>=": $greater$greater$eq, 
    ">>>": $greater$greater$greater, 
    Applicative: Applicative, 
    Apply: Apply, 
    Bind: Bind, 
    Bits: Bits, 
    BoolLike: BoolLike, 
    Category: Category, 
    EQ: EQ, 
    Eq: Eq, 
    Functor: Functor, 
    GT: GT, 
    LT: LT, 
    Monad: Monad, 
    Num: Num, 
    Ord: Ord, 
    Semigroup: Semigroup, 
    Semigroupoid: Semigroupoid, 
    Show: Show, 
    Unit: Unit, 
    ap: ap, 
    applicativeArr: applicativeArr, 
    applyArr: applyArr, 
    asTypeOf: asTypeOf, 
    bindArr: bindArr, 
    bitsNumber: bitsNumber, 
    boolLikeBoolean: boolLikeBoolean, 
    categoryArr: categoryArr, 
    compare: compare, 
    complement: complement, 
    cons: cons, 
    "const": $$const, 
    eqArray: eqArray, 
    eqBoolean: eqBoolean, 
    eqNumber: eqNumber, 
    eqOrdering: eqOrdering, 
    eqString: eqString, 
    eqUnit: eqUnit, 
    flip: flip, 
    functorArr: functorArr, 
    id: id, 
    liftA1: liftA1, 
    liftM1: liftM1, 
    monadArr: monadArr, 
    negate: negate, 
    not: not, 
    numNumber: numNumber, 
    ordArray: ordArray, 
    ordBoolean: ordBoolean, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordUnit: ordUnit, 
    otherwise: otherwise, 
    pure: pure, 
    refEq: refEq, 
    refIneq: refIneq, 
    "return": $$return, 
    semigroupArr: semigroupArr, 
    semigroupString: semigroupString, 
    semigroupUnit: semigroupUnit, 
    semigroupoidArr: semigroupoidArr, 
    shl: shl, 
    show: show, 
    showArray: showArray, 
    showBoolean: showBoolean, 
    showNumber: showNumber, 
    showOrdering: showOrdering, 
    showString: showString, 
    showUnit: showUnit, 
    shr: shr, 
    unit: unit, 
    "void": $$void, 
    zshr: zshr, 
    "||": $bar$bar
};

},{}],7:[function(require,module,exports){
require('Main').main();

},{"Main":5}]},{},[7]);
