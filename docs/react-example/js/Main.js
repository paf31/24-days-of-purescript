// Generated by psc version 0.6.2
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    var Unit = {
        create: function (value) {
            return value;
        }
    };
    function LT() {

    };
    LT.value = new LT();
    function GT() {

    };
    GT.value = new GT();
    function EQ() {

    };
    EQ.value = new EQ();
    function Semigroupoid($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    function Show(show) {
        this.show = show;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Eq($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    function Ord(__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    function Bits($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
        this[".&."] = $dot$amp$dot;
        this[".^."] = $dot$up$dot;
        this[".|."] = $dot$bar$dot;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
    };
    function BoolLike($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    function Semigroup($less$greater) {
        this["<>"] = $less$greater;
    };
    function cons(e) {  return function(l) {    return [e].concat(l);  };};
    function showStringImpl(s) {  return JSON.stringify(s);};
    function showNumberImpl(n) {  return n.toString();};
    function showArrayImpl(f) {  return function(xs) {    var ss = [];    for (var i = 0, l = xs.length; i < l; i++) {      ss[i] = f(xs[i]);    }    return '[' + ss.join(',') + ']';  };};
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
    function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
    function numShl(n1) {  return function(n2) {    return n1 << n2;  };};
    function numShr(n1) {  return function(n2) {    return n1 >> n2;  };};
    function numZshr(n1) {  return function(n2) {    return n1 >>> n2;  };};
    function numAnd(n1) {  return function(n2) {    return n1 & n2;  };};
    function numOr(n1) {  return function(n2) {    return n1 | n2;  };};
    function numXor(n1) {  return function(n2) {    return n1 ^ n2;  };};
    function numComplement(n) {  return ~n;};
    function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
    function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
    function boolNot(b) {  return !b;};
    function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $less$hash$greater = function (__dict_Functor_1) {
        return function (fa) {
            return function (f) {
                return $less$dollar$greater(__dict_Functor_1)(f)(fa);
            };
        };
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    var $div = function (dict) {
        return dict["/"];
    };
    var $dot$bar$dot = function (dict) {
        return dict[".|."];
    };
    var $dot$up$dot = function (dict) {
        return dict[".^."];
    };
    var $dot$amp$dot = function (dict) {
        return dict[".&."];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $percent = function (dict) {
        return dict["%"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var $hash = function (x) {
        return function (f) {
            return f(x);
        };
    };
    var zshr = function (dict) {
        return dict.zshr;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var shr = function (dict) {
        return dict.shr;
    };
    var showUnit = new Show(function (_8) {
        return "Unit {}";
    });
    var showString = new Show(showStringImpl);
    var showOrdering = new Show(function (_16) {
        if (_16 instanceof LT) {
            return "LT";
        };
        if (_16 instanceof GT) {
            return "GT";
        };
        if (_16 instanceof EQ) {
            return "EQ";
        };
        throw new Error("Failed pattern match");
    });
    var showNumber = new Show(showNumberImpl);
    var showBoolean = new Show(function (_9) {
        if (_9) {
            return "true";
        };
        if (!_9) {
            return "false";
        };
        throw new Error("Failed pattern match");
    });
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_3) {
        return new Show(showArrayImpl(show(__dict_Show_3)));
    };
    var shl = function (dict) {
        return dict.shl;
    };
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupUnit = new Semigroup(function (_23) {
        return function (_24) {
            return {};
        };
    });
    var semigroupString = new Semigroup(concatString);
    var semigroupArr = function (__dict_Semigroup_4) {
        return new Semigroup(function (f) {
            return function (g) {
                return function (x) {
                    return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
                };
            };
        });
    };
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var otherwise = true;
    var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (dict) {
        return dict.negate;
    };
    var liftM1 = function (__dict_Monad_6) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                    return $$return(__dict_Monad_6)(f(_0));
                });
            };
        };
    };
    var liftA1 = function (__dict_Applicative_7) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var functorArr = new Functor($less$less$less(semigroupoidArr));
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqUnit = new Eq(function (_12) {
        return function (_13) {
            return false;
        };
    }, function (_10) {
        return function (_11) {
            return true;
        };
    });
    var ordUnit = new Ord(function () {
        return eqUnit;
    }, function (_17) {
        return function (_18) {
            return EQ.value;
        };
    });
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var eqBoolean = new Eq(refIneq, refEq);
    var ordBoolean = new Ord(function () {
        return eqBoolean;
    }, function (_19) {
        return function (_20) {
            if (!_19 && !_20) {
                return EQ.value;
            };
            if (!_19 && _20) {
                return LT.value;
            };
            if (_19 && _20) {
                return EQ.value;
            };
            if (_19 && !_20) {
                return GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
    var $$const = function (_4) {
        return function (_5) {
            return _4;
        };
    };
    var $$void = function (__dict_Functor_9) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_9)($$const(unit))(fa);
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_11) {
        return function (a1) {
            return function (a2) {
                var _46 = compare(__dict_Ord_11)(a1)(a2);
                if (_46 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _47 = compare(__dict_Ord_12)(a1)(a2);
                if (_47 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _48 = compare(__dict_Ord_13)(a1)(a2);
                if (_48 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _49 = compare(__dict_Ord_14)(a1)(a2);
                if (_49 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var eqArray = function (__dict_Eq_8) {
        return new Eq(function (xs) {
            return function (ys) {
                return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_8))(xs)(ys));
            };
        }, function (xs) {
            return function (ys) {
                return eqArrayImpl($eq$eq(__dict_Eq_8))(xs)(ys);
            };
        });
    };
    var ordArray = function (__dict_Ord_10) {
        return new Ord(function () {
            return eqArray(__dict_Ord_10["__superclass_Prelude.Eq_0"]());
        }, function (_21) {
            return function (_22) {
                if (_21.length === 0 && _22.length === 0) {
                    return EQ.value;
                };
                if (_21.length === 0) {
                    return LT.value;
                };
                if (_22.length === 0) {
                    return GT.value;
                };
                if (_21.length >= 1) {
                    var _56 = _21.slice(1);
                    if (_22.length >= 1) {
                        var _54 = _22.slice(1);
                        var _52 = compare(__dict_Ord_10)(_21[0])(_22[0]);
                        if (_52 instanceof EQ) {
                            return compare(ordArray(__dict_Ord_10))(_56)(_54);
                        };
                        return _52;
                    };
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var eqOrdering = new Eq(function (x) {
        return function (y) {
            return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
        };
    }, function (_14) {
        return function (_15) {
            if (_14 instanceof LT && _15 instanceof LT) {
                return true;
            };
            if (_14 instanceof GT && _15 instanceof GT) {
                return true;
            };
            if (_14 instanceof EQ && _15 instanceof EQ) {
                return true;
            };
            return false;
        };
    });
    var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
    var asTypeOf = function (_6) {
        return function (_7) {
            return _6;
        };
    };
    var applyArr = new Apply(function (f) {
        return function (g) {
            return function (x) {
                return f(x)(g(x));
            };
        };
    }, function () {
        return functorArr;
    });
    var bindArr = new Bind(function (m) {
        return function (f) {
            return function (x) {
                return f(m(x))(x);
            };
        };
    }, function () {
        return applyArr;
    });
    var applicativeArr = new Applicative(function () {
        return applyArr;
    }, $$const);
    var monadArr = new Monad(function () {
        return applicativeArr;
    }, function () {
        return bindArr;
    });
    var ap = function (__dict_Monad_15) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_15)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        "#": $hash, 
        "$": $dollar, 
        "%": $percent, 
        "&&": $amp$amp, 
        "*": $times, 
        "+": $plus, 
        "++": $plus$plus, 
        "-": $minus, 
        ".&.": $dot$amp$dot, 
        ".^.": $dot$up$dot, 
        ".|.": $dot$bar$dot, 
        "/": $div, 
        "/=": $div$eq, 
        ":": $colon, 
        "<": $less, 
        "<#>": $less$hash$greater, 
        "<$>": $less$dollar$greater, 
        "<*>": $less$times$greater, 
        "<<<": $less$less$less, 
        "<=": $less$eq, 
        "<>": $less$greater, 
        "==": $eq$eq, 
        ">": $greater, 
        ">=": $greater$eq, 
        ">>=": $greater$greater$eq, 
        ">>>": $greater$greater$greater, 
        Applicative: Applicative, 
        Apply: Apply, 
        Bind: Bind, 
        Bits: Bits, 
        BoolLike: BoolLike, 
        Category: Category, 
        EQ: EQ, 
        Eq: Eq, 
        Functor: Functor, 
        GT: GT, 
        LT: LT, 
        Monad: Monad, 
        Num: Num, 
        Ord: Ord, 
        Semigroup: Semigroup, 
        Semigroupoid: Semigroupoid, 
        Show: Show, 
        Unit: Unit, 
        ap: ap, 
        applicativeArr: applicativeArr, 
        applyArr: applyArr, 
        asTypeOf: asTypeOf, 
        bindArr: bindArr, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        categoryArr: categoryArr, 
        compare: compare, 
        complement: complement, 
        cons: cons, 
        "const": $$const, 
        eqArray: eqArray, 
        eqBoolean: eqBoolean, 
        eqNumber: eqNumber, 
        eqOrdering: eqOrdering, 
        eqString: eqString, 
        eqUnit: eqUnit, 
        flip: flip, 
        functorArr: functorArr, 
        id: id, 
        liftA1: liftA1, 
        liftM1: liftM1, 
        monadArr: monadArr, 
        negate: negate, 
        not: not, 
        numNumber: numNumber, 
        ordArray: ordArray, 
        ordBoolean: ordBoolean, 
        ordNumber: ordNumber, 
        ordString: ordString, 
        ordUnit: ordUnit, 
        otherwise: otherwise, 
        pure: pure, 
        refEq: refEq, 
        refIneq: refIneq, 
        "return": $$return, 
        semigroupArr: semigroupArr, 
        semigroupString: semigroupString, 
        semigroupUnit: semigroupUnit, 
        semigroupoidArr: semigroupoidArr, 
        shl: shl, 
        show: show, 
        showArray: showArray, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        showOrdering: showOrdering, 
        showString: showString, 
        showUnit: showUnit, 
        shr: shr, 
        unit: unit, 
        "void": $$void, 
        zshr: zshr, 
        "||": $bar$bar
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeIndex(xs) {  return function(n) {    return xs[n];  };};
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function mkFn0(fn) {  return function() {    return fn({});  };};
    function mkFn1(fn) {  return function(a) {    return fn(a);  };};
    function mkFn2(fn) {  return function(a, b) {    return fn(a)(b);  };};
    function mkFn3(fn) {  return function(a, b, c) {    return fn(a)(b)(c);  };};
    function mkFn4(fn) {  return function(a, b, c, d) {    return fn(a)(b)(c)(d);  };};
    function mkFn5(fn) {  return function(a, b, c, d, e) {    return fn(a)(b)(c)(d)(e);  };};
    function mkFn6(fn) {  return function(a, b, c, d, e, f) {    return fn(a)(b)(c)(d)(e)(f);  };};
    function mkFn7(fn) {  return function(a, b, c, d, e, f, g) {    return fn(a)(b)(c)(d)(e)(f)(g);  };};
    function mkFn8(fn) {  return function(a, b, c, d, e, f, g, h) {    return fn(a)(b)(c)(d)(e)(f)(g)(h);  };};
    function mkFn9(fn) {  return function(a, b, c, d, e, f, g, h, i) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);  };};
    function mkFn10(fn) {  return function(a, b, c, d, e, f, g, h, i, j) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);  };};
    function runFn0(fn) {  return fn();};
    function runFn1(fn) {  return function(a) {    return fn(a);  };};
    function runFn2(fn) {  return function(a) {    return function(b) {      return fn(a, b);    };  };};
    function runFn3(fn) {  return function(a) {    return function(b) {      return function(c) {        return fn(a, b, c);      };    };  };};
    function runFn4(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return fn(a, b, c, d);        };      };    };  };};
    function runFn5(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return fn(a, b, c, d, e);          };        };      };    };  };};
    function runFn6(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return fn(a, b, c, d, e, f);            };          };        };      };    };  };};
    function runFn7(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return fn(a, b, c, d, e, f, g);              };            };          };        };      };    };  };};
    function runFn8(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return fn(a, b, c, d, e, f, g, h);                };              };            };          };        };      };    };  };};
    function runFn9(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return fn(a, b, c, d, e, f, g, h, i);                  };                };              };            };          };        };      };    };  };};
    function runFn10(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return function(j) {                      return fn(a, b, c, d, e, f, g, h, i, j);                    };                  };                };              };            };          };        };      };    };  };};
    var on = function (f) {
        return function (g) {
            return function (x) {
                return function (y) {
                    return f(g(x))(g(y));
                };
            };
        };
    };
    return {
        mkFn0: mkFn0, 
        mkFn1: mkFn1, 
        mkFn10: mkFn10, 
        mkFn2: mkFn2, 
        mkFn3: mkFn3, 
        mkFn4: mkFn4, 
        mkFn5: mkFn5, 
        mkFn6: mkFn6, 
        mkFn7: mkFn7, 
        mkFn8: mkFn8, 
        mkFn9: mkFn9, 
        on: on, 
        runFn0: runFn0, 
        runFn1: runFn1, 
        runFn10: runFn10, 
        runFn2: runFn2, 
        runFn3: runFn3, 
        runFn4: runFn4, 
        runFn5: runFn5, 
        runFn6: runFn6, 
        runFn7: runFn7, 
        runFn8: runFn8, 
        runFn9: runFn9
    };
})();
var PS = PS || {};
PS.Data_Eq = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Ref = {
        create: function (value) {
            return value;
        }
    };
    var liftRef = function (_25) {
        return function (_26) {
            return function (_27) {
                return _25(_26)(_27);
            };
        };
    };
    var functorRef = new Prelude.Functor(function (_28) {
        return function (_29) {
            return _28(_29);
        };
    });
    var eqRef = new Prelude.Eq(liftRef(Prelude.refIneq), liftRef(Prelude.refEq));
    return {
        Ref: Ref, 
        eqRef: eqRef, 
        functorRef: functorRef, 
        liftRef: liftRef
    };
})();
var PS = PS || {};
PS.DOM = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    return {};
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    function runPure(f) {  return f();};
    function untilE(f) {  return function() {    while (!f());    return {};  };};
    function whileE(f) {  return function(a) {    return function() {      while (f()) {        a();      }      return {};    };  };};
    function forE(lo) {  return function(hi) {    return function(f) {      return function() {        for (var i = lo; i < hi; i++) {          f(i)();        }      };    };  };};
    function foreachE(as) {  return function(f) {    return function() {      for (var i = 0; i < as.length; i++) {        f(as[i])();      }    };  };};
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        applicativeEff: applicativeEff, 
        applyEff: applyEff, 
        bindE: bindE, 
        bindEff: bindEff, 
        forE: forE, 
        foreachE: foreachE, 
        functorEff: functorEff, 
        monadEff: monadEff, 
        returnE: returnE, 
        runPure: runPure, 
        untilE: untilE, 
        whileE: whileE
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeInterleaveEff(f) {  return f;};
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function newSTRef(val) {  return function() {    return { value: val };  };};
    function readSTRef(ref) {  return function() {    return ref.value;  };};
    function modifySTRef(ref) {  return function(f) {    return function() {      return ref.value = f(ref.value);    };  };};
    function writeSTRef(ref) {  return function(a) {    return function() {      return ref.value = a;    };  };};
    function runST(f) {  return f;};
    return {
        modifySTRef: modifySTRef, 
        newSTRef: newSTRef, 
        readSTRef: readSTRef, 
        runST: runST, 
        writeSTRef: writeSTRef
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    var print = function (__dict_Show_16) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_16)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.React = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    function noop0() { return null; };
    var noop1 = noop0;
    var noop2 = noop0;
     function getProps() {        return __current.props;  };
     function getRefs() {        return __current.refs;  };
     function writeState(state) {                      __current.replaceState({state: state});         return function() { return state; }           };
     function readState() {             return __current.state.state;  };
     function getSelf() {    return __current;   };
     function runUI(ref) {            return function(action) {        return function() {              if (ref.isMounted()) {           __current = ref;               try {                            return action();             } finally {                      __current = null;            }                            }                            }                            }                            };
     var __current;                                     function mkUI(ss) {                                  return function(render) {                            var specs = {};                                    for (var s in ss) {                                  if (ss.hasOwnProperty(s)) {                          specs[s] = (function(impl) {                         return function() {                                  __current = this;                                  try {                                                return impl.apply(this, arguments);              } finally {                                          __current = null;                                }                                                }                                                })(ss[s]);                                       }                                                }                                                  specs.getInitialState= function() {                  __current = this;                                  try {                                                return {state: ss.getInitialState()};            } finally {                                          __current = null;                                }                                                };                                                 specs.render = function() {                          __current = this;                                  try {                                                var ui = render.call(this);                      } finally {                                          __current = null;                                }                                                  return ui;                                       };                                                 return React.createClass(specs);                 }                                                };
     function handle(f) {                       var component = __current;               return function(e) {                       __current = component;                   try {                                      var res = f.call(__current, e)();      } finally {                                __current = null;                      }                                        return res;                            }                                      };
    var renderToString = React.renderComponentToString;
     function renderToBody(component) {                             return function() {                                            return React.renderComponent(component, document.body);    }                                                          };
     function renderToElementById(id) {                                             return function(component) {                                                   return function() {                                                            return React.renderComponent(component, document.getElementById(id));      }                                                                          }                                                                          };
    function deferred(action) {  var component = __current;  return function() {    __current = component;    try {      return action();    } finally {      __current = null;    }  };};
    var transformState = function (f) {
        return function __do() {
            var _3 = readState();
            return writeState(f(_3))();
        };
    };
    var spec = (function () {
        var updateAlways = function (props) {
            return function (state) {
                return Prelude["return"](Control_Monad_Eff.monadEff)(true);
            };
        };
        return {
            getInitialState: noop0, 
            componentWillMount: noop0, 
            componentDidMount: noop0, 
            componentWillReceiveProps: noop1, 
            shouldComponentUpdate: updateAlways, 
            componentWillUpdate: noop2, 
            componentDidUpdate: noop2, 
            componentWillUnmount: noop0
        };
    })();
    return {
        deferred: deferred, 
        getProps: getProps, 
        getRefs: getRefs, 
        getSelf: getSelf, 
        handle: handle, 
        mkUI: mkUI, 
        noop0: noop0, 
        noop1: noop1, 
        noop2: noop2, 
        readState: readState, 
        renderToBody: renderToBody, 
        renderToElementById: renderToElementById, 
        renderToString: renderToString, 
        runUI: runUI, 
        spec: spec, 
        transformState: transformState, 
        writeState: writeState
    };
})();
var PS = PS || {};
PS.React_DOM = (function () {
    "use strict";
    var React = PS.React;
    var Prelude = PS.Prelude;
    function Accept(value0) {
        this.value0 = value0;
    };
    Accept.create = function (value0) {
        return new Accept(value0);
    };
    function AccessKey(value0) {
        this.value0 = value0;
    };
    AccessKey.create = function (value0) {
        return new AccessKey(value0);
    };
    function Action(value0) {
        this.value0 = value0;
    };
    Action.create = function (value0) {
        return new Action(value0);
    };
    function AllowFullScreen(value0) {
        this.value0 = value0;
    };
    AllowFullScreen.create = function (value0) {
        return new AllowFullScreen(value0);
    };
    function AllowTransparency(value0) {
        this.value0 = value0;
    };
    AllowTransparency.create = function (value0) {
        return new AllowTransparency(value0);
    };
    function Alt(value0) {
        this.value0 = value0;
    };
    Alt.create = function (value0) {
        return new Alt(value0);
    };
    function Aria(value0) {
        this.value0 = value0;
    };
    Aria.create = function (value0) {
        return new Aria(value0);
    };
    function Async(value0) {
        this.value0 = value0;
    };
    Async.create = function (value0) {
        return new Async(value0);
    };
    function AutoComplete(value0) {
        this.value0 = value0;
    };
    AutoComplete.create = function (value0) {
        return new AutoComplete(value0);
    };
    function AutoFocus(value0) {
        this.value0 = value0;
    };
    AutoFocus.create = function (value0) {
        return new AutoFocus(value0);
    };
    function AutoPlay(value0) {
        this.value0 = value0;
    };
    AutoPlay.create = function (value0) {
        return new AutoPlay(value0);
    };
    function CellPadding(value0) {
        this.value0 = value0;
    };
    CellPadding.create = function (value0) {
        return new CellPadding(value0);
    };
    function CellSpacing(value0) {
        this.value0 = value0;
    };
    CellSpacing.create = function (value0) {
        return new CellSpacing(value0);
    };
    function CharSet(value0) {
        this.value0 = value0;
    };
    CharSet.create = function (value0) {
        return new CharSet(value0);
    };
    function Checked(value0) {
        this.value0 = value0;
    };
    Checked.create = function (value0) {
        return new Checked(value0);
    };
    function ClassName(value0) {
        this.value0 = value0;
    };
    ClassName.create = function (value0) {
        return new ClassName(value0);
    };
    function Cols(value0) {
        this.value0 = value0;
    };
    Cols.create = function (value0) {
        return new Cols(value0);
    };
    function ColSpan(value0) {
        this.value0 = value0;
    };
    ColSpan.create = function (value0) {
        return new ColSpan(value0);
    };
    function Content(value0) {
        this.value0 = value0;
    };
    Content.create = function (value0) {
        return new Content(value0);
    };
    function ContentEditable(value0) {
        this.value0 = value0;
    };
    ContentEditable.create = function (value0) {
        return new ContentEditable(value0);
    };
    function ContextMenu(value0) {
        this.value0 = value0;
    };
    ContextMenu.create = function (value0) {
        return new ContextMenu(value0);
    };
    function Controls(value0) {
        this.value0 = value0;
    };
    Controls.create = function (value0) {
        return new Controls(value0);
    };
    function CrossOrigin(value0) {
        this.value0 = value0;
    };
    CrossOrigin.create = function (value0) {
        return new CrossOrigin(value0);
    };
    function Data(value0) {
        this.value0 = value0;
    };
    Data.create = function (value0) {
        return new Data(value0);
    };
    function DateTime(value0) {
        this.value0 = value0;
    };
    DateTime.create = function (value0) {
        return new DateTime(value0);
    };
    function Defer(value0) {
        this.value0 = value0;
    };
    Defer.create = function (value0) {
        return new Defer(value0);
    };
    function Dir(value0) {
        this.value0 = value0;
    };
    Dir.create = function (value0) {
        return new Dir(value0);
    };
    function Disabled(value0) {
        this.value0 = value0;
    };
    Disabled.create = function (value0) {
        return new Disabled(value0);
    };
    function Download(value0) {
        this.value0 = value0;
    };
    Download.create = function (value0) {
        return new Download(value0);
    };
    function Draggable(value0) {
        this.value0 = value0;
    };
    Draggable.create = function (value0) {
        return new Draggable(value0);
    };
    function EncType(value0) {
        this.value0 = value0;
    };
    EncType.create = function (value0) {
        return new EncType(value0);
    };
    function Form(value0) {
        this.value0 = value0;
    };
    Form.create = function (value0) {
        return new Form(value0);
    };
    function FormNoValidate(value0) {
        this.value0 = value0;
    };
    FormNoValidate.create = function (value0) {
        return new FormNoValidate(value0);
    };
    function FrameBorder(value0) {
        this.value0 = value0;
    };
    FrameBorder.create = function (value0) {
        return new FrameBorder(value0);
    };
    function Height(value0) {
        this.value0 = value0;
    };
    Height.create = function (value0) {
        return new Height(value0);
    };
    function Hidden(value0) {
        this.value0 = value0;
    };
    Hidden.create = function (value0) {
        return new Hidden(value0);
    };
    function Href(value0) {
        this.value0 = value0;
    };
    Href.create = function (value0) {
        return new Href(value0);
    };
    function HrefLang(value0) {
        this.value0 = value0;
    };
    HrefLang.create = function (value0) {
        return new HrefLang(value0);
    };
    function HtmlFor(value0) {
        this.value0 = value0;
    };
    HtmlFor.create = function (value0) {
        return new HtmlFor(value0);
    };
    function HttpEquiv(value0) {
        this.value0 = value0;
    };
    HttpEquiv.create = function (value0) {
        return new HttpEquiv(value0);
    };
    function Icon(value0) {
        this.value0 = value0;
    };
    Icon.create = function (value0) {
        return new Icon(value0);
    };
    function Id(value0) {
        this.value0 = value0;
    };
    Id.create = function (value0) {
        return new Id(value0);
    };
    function Label(value0) {
        this.value0 = value0;
    };
    Label.create = function (value0) {
        return new Label(value0);
    };
    function Lang(value0) {
        this.value0 = value0;
    };
    Lang.create = function (value0) {
        return new Lang(value0);
    };
    function List(value0) {
        this.value0 = value0;
    };
    List.create = function (value0) {
        return new List(value0);
    };
    function Loop(value0) {
        this.value0 = value0;
    };
    Loop.create = function (value0) {
        return new Loop(value0);
    };
    function Max(value0) {
        this.value0 = value0;
    };
    Max.create = function (value0) {
        return new Max(value0);
    };
    function MaxLength(value0) {
        this.value0 = value0;
    };
    MaxLength.create = function (value0) {
        return new MaxLength(value0);
    };
    function MediaGroup(value0) {
        this.value0 = value0;
    };
    MediaGroup.create = function (value0) {
        return new MediaGroup(value0);
    };
    function Method(value0) {
        this.value0 = value0;
    };
    Method.create = function (value0) {
        return new Method(value0);
    };
    function Min(value0) {
        this.value0 = value0;
    };
    Min.create = function (value0) {
        return new Min(value0);
    };
    function Multiple(value0) {
        this.value0 = value0;
    };
    Multiple.create = function (value0) {
        return new Multiple(value0);
    };
    function Muted(value0) {
        this.value0 = value0;
    };
    Muted.create = function (value0) {
        return new Muted(value0);
    };
    function Name(value0) {
        this.value0 = value0;
    };
    Name.create = function (value0) {
        return new Name(value0);
    };
    function NoValidate(value0) {
        this.value0 = value0;
    };
    NoValidate.create = function (value0) {
        return new NoValidate(value0);
    };
    function Pattern(value0) {
        this.value0 = value0;
    };
    Pattern.create = function (value0) {
        return new Pattern(value0);
    };
    function Placeholder(value0) {
        this.value0 = value0;
    };
    Placeholder.create = function (value0) {
        return new Placeholder(value0);
    };
    function Poster(value0) {
        this.value0 = value0;
    };
    Poster.create = function (value0) {
        return new Poster(value0);
    };
    function Preload(value0) {
        this.value0 = value0;
    };
    Preload.create = function (value0) {
        return new Preload(value0);
    };
    function RadioGroup(value0) {
        this.value0 = value0;
    };
    RadioGroup.create = function (value0) {
        return new RadioGroup(value0);
    };
    function ReadOnly(value0) {
        this.value0 = value0;
    };
    ReadOnly.create = function (value0) {
        return new ReadOnly(value0);
    };
    function Rel(value0) {
        this.value0 = value0;
    };
    Rel.create = function (value0) {
        return new Rel(value0);
    };
    function Required(value0) {
        this.value0 = value0;
    };
    Required.create = function (value0) {
        return new Required(value0);
    };
    function Role(value0) {
        this.value0 = value0;
    };
    Role.create = function (value0) {
        return new Role(value0);
    };
    function Rows(value0) {
        this.value0 = value0;
    };
    Rows.create = function (value0) {
        return new Rows(value0);
    };
    function RowSpan(value0) {
        this.value0 = value0;
    };
    RowSpan.create = function (value0) {
        return new RowSpan(value0);
    };
    function Sandbox(value0) {
        this.value0 = value0;
    };
    Sandbox.create = function (value0) {
        return new Sandbox(value0);
    };
    function Scope(value0) {
        this.value0 = value0;
    };
    Scope.create = function (value0) {
        return new Scope(value0);
    };
    function ScrollLeft(value0) {
        this.value0 = value0;
    };
    ScrollLeft.create = function (value0) {
        return new ScrollLeft(value0);
    };
    function Scrolling(value0) {
        this.value0 = value0;
    };
    Scrolling.create = function (value0) {
        return new Scrolling(value0);
    };
    function ScrollTop(value0) {
        this.value0 = value0;
    };
    ScrollTop.create = function (value0) {
        return new ScrollTop(value0);
    };
    function Seamless(value0) {
        this.value0 = value0;
    };
    Seamless.create = function (value0) {
        return new Seamless(value0);
    };
    function Selected(value0) {
        this.value0 = value0;
    };
    Selected.create = function (value0) {
        return new Selected(value0);
    };
    function Size(value0) {
        this.value0 = value0;
    };
    Size.create = function (value0) {
        return new Size(value0);
    };
    function Span(value0) {
        this.value0 = value0;
    };
    Span.create = function (value0) {
        return new Span(value0);
    };
    function SpellCheck(value0) {
        this.value0 = value0;
    };
    SpellCheck.create = function (value0) {
        return new SpellCheck(value0);
    };
    function Src(value0) {
        this.value0 = value0;
    };
    Src.create = function (value0) {
        return new Src(value0);
    };
    function SrcDoc(value0) {
        this.value0 = value0;
    };
    SrcDoc.create = function (value0) {
        return new SrcDoc(value0);
    };
    function SrcSet(value0) {
        this.value0 = value0;
    };
    SrcSet.create = function (value0) {
        return new SrcSet(value0);
    };
    function Start(value0) {
        this.value0 = value0;
    };
    Start.create = function (value0) {
        return new Start(value0);
    };
    function Step(value0) {
        this.value0 = value0;
    };
    Step.create = function (value0) {
        return new Step(value0);
    };
    function Style(value0) {
        this.value0 = value0;
    };
    Style.create = function (value0) {
        return new Style(value0);
    };
    function TabIndex(value0) {
        this.value0 = value0;
    };
    TabIndex.create = function (value0) {
        return new TabIndex(value0);
    };
    function Target(value0) {
        this.value0 = value0;
    };
    Target.create = function (value0) {
        return new Target(value0);
    };
    function Title(value0) {
        this.value0 = value0;
    };
    Title.create = function (value0) {
        return new Title(value0);
    };
    function Type(value0) {
        this.value0 = value0;
    };
    Type.create = function (value0) {
        return new Type(value0);
    };
    function Value(value0) {
        this.value0 = value0;
    };
    Value.create = function (value0) {
        return new Value(value0);
    };
    function Width(value0) {
        this.value0 = value0;
    };
    Width.create = function (value0) {
        return new Width(value0);
    };
    function Wmode(value0) {
        this.value0 = value0;
    };
    Wmode.create = function (value0) {
        return new Wmode(value0);
    };
    function AutoCapitalize(value0) {
        this.value0 = value0;
    };
    AutoCapitalize.create = function (value0) {
        return new AutoCapitalize(value0);
    };
    function AutoCorrect(value0) {
        this.value0 = value0;
    };
    AutoCorrect.create = function (value0) {
        return new AutoCorrect(value0);
    };
    function Property(value0) {
        this.value0 = value0;
    };
    Property.create = function (value0) {
        return new Property(value0);
    };
    function Ref(value0) {
        this.value0 = value0;
    };
    Ref.create = function (value0) {
        return new Ref(value0);
    };
    function Key(value0) {
        this.value0 = value0;
    };
    Key.create = function (value0) {
        return new Key(value0);
    };
    function DangerouslySetInnerHTML(value0) {
        this.value0 = value0;
    };
    DangerouslySetInnerHTML.create = function (value0) {
        return new DangerouslySetInnerHTML(value0);
    };
    function OnBlur(value0) {
        this.value0 = value0;
    };
    OnBlur.create = function (value0) {
        return new OnBlur(value0);
    };
    function OnChange(value0) {
        this.value0 = value0;
    };
    OnChange.create = function (value0) {
        return new OnChange(value0);
    };
    function OnContextMenu(value0) {
        this.value0 = value0;
    };
    OnContextMenu.create = function (value0) {
        return new OnContextMenu(value0);
    };
    function OnCopy(value0) {
        this.value0 = value0;
    };
    OnCopy.create = function (value0) {
        return new OnCopy(value0);
    };
    function OnCut(value0) {
        this.value0 = value0;
    };
    OnCut.create = function (value0) {
        return new OnCut(value0);
    };
    function OnClick(value0) {
        this.value0 = value0;
    };
    OnClick.create = function (value0) {
        return new OnClick(value0);
    };
    function OnDoubleClick(value0) {
        this.value0 = value0;
    };
    OnDoubleClick.create = function (value0) {
        return new OnDoubleClick(value0);
    };
    function OnDrag(value0) {
        this.value0 = value0;
    };
    OnDrag.create = function (value0) {
        return new OnDrag(value0);
    };
    function OnDragEnd(value0) {
        this.value0 = value0;
    };
    OnDragEnd.create = function (value0) {
        return new OnDragEnd(value0);
    };
    function OnDragEnter(value0) {
        this.value0 = value0;
    };
    OnDragEnter.create = function (value0) {
        return new OnDragEnter(value0);
    };
    function OnDragExit(value0) {
        this.value0 = value0;
    };
    OnDragExit.create = function (value0) {
        return new OnDragExit(value0);
    };
    function OnDragLeave(value0) {
        this.value0 = value0;
    };
    OnDragLeave.create = function (value0) {
        return new OnDragLeave(value0);
    };
    function OnDragOver(value0) {
        this.value0 = value0;
    };
    OnDragOver.create = function (value0) {
        return new OnDragOver(value0);
    };
    function OnDragStart(value0) {
        this.value0 = value0;
    };
    OnDragStart.create = function (value0) {
        return new OnDragStart(value0);
    };
    function OnDrop(value0) {
        this.value0 = value0;
    };
    OnDrop.create = function (value0) {
        return new OnDrop(value0);
    };
    function OnError(value0) {
        this.value0 = value0;
    };
    OnError.create = function (value0) {
        return new OnError(value0);
    };
    function OnFocus(value0) {
        this.value0 = value0;
    };
    OnFocus.create = function (value0) {
        return new OnFocus(value0);
    };
    function OnInput(value0) {
        this.value0 = value0;
    };
    OnInput.create = function (value0) {
        return new OnInput(value0);
    };
    function OnKeyDown(value0) {
        this.value0 = value0;
    };
    OnKeyDown.create = function (value0) {
        return new OnKeyDown(value0);
    };
    function OnKeyPress(value0) {
        this.value0 = value0;
    };
    OnKeyPress.create = function (value0) {
        return new OnKeyPress(value0);
    };
    function OnKeyUp(value0) {
        this.value0 = value0;
    };
    OnKeyUp.create = function (value0) {
        return new OnKeyUp(value0);
    };
    function OnLoad(value0) {
        this.value0 = value0;
    };
    OnLoad.create = function (value0) {
        return new OnLoad(value0);
    };
    function OnMouseEnter(value0) {
        this.value0 = value0;
    };
    OnMouseEnter.create = function (value0) {
        return new OnMouseEnter(value0);
    };
    function OnMouseLeave(value0) {
        this.value0 = value0;
    };
    OnMouseLeave.create = function (value0) {
        return new OnMouseLeave(value0);
    };
    function OnMouseDown(value0) {
        this.value0 = value0;
    };
    OnMouseDown.create = function (value0) {
        return new OnMouseDown(value0);
    };
    function OnMouseMove(value0) {
        this.value0 = value0;
    };
    OnMouseMove.create = function (value0) {
        return new OnMouseMove(value0);
    };
    function OnMouseOut(value0) {
        this.value0 = value0;
    };
    OnMouseOut.create = function (value0) {
        return new OnMouseOut(value0);
    };
    function OnMouseOver(value0) {
        this.value0 = value0;
    };
    OnMouseOver.create = function (value0) {
        return new OnMouseOver(value0);
    };
    function OnMouseUp(value0) {
        this.value0 = value0;
    };
    OnMouseUp.create = function (value0) {
        return new OnMouseUp(value0);
    };
    function OnPaste(value0) {
        this.value0 = value0;
    };
    OnPaste.create = function (value0) {
        return new OnPaste(value0);
    };
    function OnReset(value0) {
        this.value0 = value0;
    };
    OnReset.create = function (value0) {
        return new OnReset(value0);
    };
    function OnScroll(value0) {
        this.value0 = value0;
    };
    OnScroll.create = function (value0) {
        return new OnScroll(value0);
    };
    function OnSubmit(value0) {
        this.value0 = value0;
    };
    OnSubmit.create = function (value0) {
        return new OnSubmit(value0);
    };
    function OnTouchCancel(value0) {
        this.value0 = value0;
    };
    OnTouchCancel.create = function (value0) {
        return new OnTouchCancel(value0);
    };
    function OnTouchEnd(value0) {
        this.value0 = value0;
    };
    OnTouchEnd.create = function (value0) {
        return new OnTouchEnd(value0);
    };
    function OnTouchMove(value0) {
        this.value0 = value0;
    };
    OnTouchMove.create = function (value0) {
        return new OnTouchMove(value0);
    };
    function OnTouchStart(value0) {
        this.value0 = value0;
    };
    OnTouchStart.create = function (value0) {
        return new OnTouchStart(value0);
    };
    function OnWheel(value0) {
        this.value0 = value0;
    };
    OnWheel.create = function (value0) {
        return new OnWheel(value0);
    };
     function mkProps(props) {                                   var result = {};                                          for (var i = 0, len = props.length; i < len; i++) {         var prop = props[i];                                      var name = prop.constructor.name;                         name = name[0].toLowerCase() + name.substring(1);         var val = prop.value0;                                    /* Until React.js handles data and aria like style*/      /* we have to unload the properties.*/                    if (name === 'data' || name === 'aria') {                   for (var subprop in val) {                                  if (val.hasOwnProperty(subprop)) {                          result[name + '-' + subprop] = val[subprop];            }                                                       }                                                       } else {                                                    result[name] = val;                                     }                                                       }                                                         return result;                                          }                                                         function mkDOM(tagName) {                                   var ctor = window.React.DOM[tagName];                     return function(props) {                                    return function(children) {                                 var p = props.length > 0 ? mkProps(props) : null;         return ctor.apply(ctor, [p].concat(children));          }                                                       }                                                       };
    function text(text) {   return text;        };
    var wmode = Wmode.create;
    var width = Width.create;
    var wbr = mkDOM("wbr");
    var wbr$prime = wbr([  ]);
    var video = mkDOM("video");
    var video$prime = video([  ]);
    var $$var = mkDOM("var");
    var var$prime = $$var([  ]);
    var value = Value.create;
    var ul = mkDOM("ul");
    var ul$prime = ul([  ]);
    var u = mkDOM("u");
    var u$prime = u([  ]);
    var typeProp = Type.create;
    var track = mkDOM("track");
    var track$prime = track([  ]);
    var tr = mkDOM("tr");
    var tr$prime = tr([  ]);
    var titleProp = Title.create;
    var title = mkDOM("title");
    var title$prime = title([  ]);
    var time = mkDOM("time");
    var time$prime = time([  ]);
    var thead = mkDOM("thead");
    var thead$prime = thead([  ]);
    var th = mkDOM("th");
    var th$prime = th([  ]);
    var tfoot = mkDOM("tfoot");
    var tfoot$prime = tfoot([  ]);
    var textarea = mkDOM("textarea");
    var textarea$prime = textarea([  ]);
    var td = mkDOM("td");
    var td$prime = td([  ]);
    var tbody = mkDOM("tbody");
    var tbody$prime = tbody([  ]);
    var target = Target.create;
    var table = mkDOM("table");
    var table$prime = table([  ]);
    var tabIndex = TabIndex.create;
    var svg = mkDOM("svg");
    var svg$prime = svg([  ]);
    var sup = mkDOM("sup");
    var sup$prime = sup([  ]);
    var summary = mkDOM("summary");
    var summary$prime = summary([  ]);
    var sub = mkDOM("sub");
    var sub$prime = sub([  ]);
    var styleDOM = mkDOM("style");
    var styleDOM$prime = styleDOM([  ]);
    var style = Style.create;
    var strong = mkDOM("strong");
    var strong$prime = strong([  ]);
    var stop = mkDOM("stop");
    var stop$prime = stop([  ]);
    var step = Step.create;
    var start = Start.create;
    var srcSet = SrcSet.create;
    var srcDoc = SrcDoc.create;
    var src = Src.create;
    var spellCheck = SpellCheck.create;
    var spanProp = Span.create;
    var span = mkDOM("span");
    var span$prime = span([  ]);
    var source = mkDOM("source");
    var source$prime = source([  ]);
    var small = mkDOM("small");
    var small$prime = small([  ]);
    var size = Size.create;
    var selected = Selected.create;
    var select = mkDOM("select");
    var select$prime = select([  ]);
    var section = mkDOM("section");
    var section$prime = section([  ]);
    var seamless = Seamless.create;
    var scrolling = Scrolling.create;
    var scrollTop = ScrollTop.create;
    var scrollLeft = ScrollLeft.create;
    var script = mkDOM("script");
    var script$prime = script([  ]);
    var scope = Scope.create;
    var sandbox = Sandbox.create;
    var samp = mkDOM("samp");
    var samp$prime = samp([  ]);
    var s = mkDOM("s");
    var s$prime = s([  ]);
    var ruby = mkDOM("ruby");
    var ruby$prime = ruby([  ]);
    var rt = mkDOM("rt");
    var rt$prime = rt([  ]);
    var rp = mkDOM("rp");
    var rp$prime = rp([  ]);
    var rows = Rows.create;
    var rowSpan = RowSpan.create;
    var role = Role.create;
    var required = Required.create;
    var rel = Rel.create;
    var ref = Ref.create;
    var rect = mkDOM("rect");
    var rect$prime = rect([  ]);
    var readOnly = ReadOnly.create;
    var radioGroup = RadioGroup.create;
    var radialGradient = mkDOM("radialGradient");
    var radialGradient$prime = radialGradient([  ]);
    var q = mkDOM("q");
    var q$prime = q([  ]);
    var property = Property.create;
    var progress = mkDOM("progress");
    var progress$prime = progress([  ]);
    var preload = Preload.create;
    var pre = mkDOM("pre");
    var pre$prime = pre([  ]);
    var poster = Poster.create;
    var polyline = mkDOM("polyline");
    var polyline$prime = polyline([  ]);
    var polygon = mkDOM("polygon");
    var polygon$prime = polygon([  ]);
    var placeholder = Placeholder.create;
    var pattern = Pattern.create;
    var path = mkDOM("path");
    var path$prime = path([  ]);
    var param = mkDOM("param");
    var param$prime = param([  ]);
    var p = mkDOM("p");
    var p$prime = p([  ]);
    var output = mkDOM("output");
    var output$prime = output([  ]);
    var option = mkDOM("option");
    var option$prime = option([  ]);
    var optgroup = mkDOM("optgroup");
    var optgroup$prime = optgroup([  ]);
    var onWheel = function (f) {
        return OnWheel.create(React.handle(f));
    };
    var onTouchStart = function (f) {
        return OnTouchStart.create(React.handle(f));
    };
    var onTouchMove = function (f) {
        return OnTouchMove.create(React.handle(f));
    };
    var onTouchEnd = function (f) {
        return OnTouchEnd.create(React.handle(f));
    };
    var onTouchCancel = function (f) {
        return OnTouchCancel.create(React.handle(f));
    };
    var onSubmit = function (f) {
        return OnSubmit.create(React.handle(f));
    };
    var onScroll = function (f) {
        return OnScroll.create(React.handle(f));
    };
    var onReset = function (f) {
        return OnReset.create(React.handle(f));
    };
    var onPaste = function (f) {
        return OnPaste.create(React.handle(f));
    };
    var onMouseUp = function (f) {
        return OnMouseUp.create(React.handle(f));
    };
    var onMouseOver = function (f) {
        return OnMouseOver.create(React.handle(f));
    };
    var onMouseOut = function (f) {
        return OnMouseOut.create(React.handle(f));
    };
    var onMouseMove = function (f) {
        return OnMouseMove.create(React.handle(f));
    };
    var onMouseLeave = function (f) {
        return OnMouseLeave.create(React.handle(f));
    };
    var onMouseEnter = function (f) {
        return OnMouseEnter.create(React.handle(f));
    };
    var onMouseDown = function (f) {
        return OnMouseDown.create(React.handle(f));
    };
    var onLoad = function (f) {
        return OnLoad.create(React.handle(f));
    };
    var onKeyUp = function (f) {
        return OnKeyUp.create(React.handle(f));
    };
    var onKeyPress = function (f) {
        return OnKeyPress.create(React.handle(f));
    };
    var onKeyDown = function (f) {
        return OnKeyDown.create(React.handle(f));
    };
    var onInput = function (f) {
        return OnInput.create(React.handle(f));
    };
    var onFocus = function (f) {
        return OnFocus.create(React.handle(f));
    };
    var onError = function (f) {
        return OnError.create(React.handle(f));
    };
    var onDrop = function (f) {
        return OnDrop.create(React.handle(f));
    };
    var onDragStart = function (f) {
        return OnDragStart.create(React.handle(f));
    };
    var onDragOver = function (f) {
        return OnDragOver.create(React.handle(f));
    };
    var onDragLeave = function (f) {
        return OnDragLeave.create(React.handle(f));
    };
    var onDragExit = function (f) {
        return OnDragExit.create(React.handle(f));
    };
    var onDragEnter = function (f) {
        return OnDragEnter.create(React.handle(f));
    };
    var onDragEnd = function (f) {
        return OnDragEnd.create(React.handle(f));
    };
    var onDrag = function (f) {
        return OnDrag.create(React.handle(f));
    };
    var onDoubleClick = function (f) {
        return OnDoubleClick.create(React.handle(f));
    };
    var onCut = function (f) {
        return OnCut.create(React.handle(f));
    };
    var onCopy = function (f) {
        return OnCopy.create(React.handle(f));
    };
    var onContextMenu = function (f) {
        return OnContextMenu.create(React.handle(f));
    };
    var onClick = function (f) {
        return OnClick.create(React.handle(f));
    };
    var onChange = function (f) {
        return OnChange.create(React.handle(f));
    };
    var onBlur = function (f) {
        return OnBlur.create(React.handle(f));
    };
    var ol = mkDOM("ol");
    var ol$prime = ol([  ]);
    var object = mkDOM("object");
    var object$prime = object([  ]);
    var noscript = mkDOM("noscript");
    var noscript$prime = noscript([  ]);
    var noValidate = NoValidate.create;
    var nav = mkDOM("nav");
    var nav$prime = nav([  ]);
    var name = Name.create;
    var muted = Muted.create;
    var multiple = Multiple.create;
    var min = Min.create;
    var method = Method.create;
    var meter = mkDOM("meter");
    var meter$prime = meter([  ]);
    var meta = mkDOM("meta");
    var meta$prime = meta([  ]);
    var menuitem = mkDOM("menuitem");
    var menuitem$prime = menuitem([  ]);
    var menu = mkDOM("menu");
    var menu$prime = menu([  ]);
    var mediaGroup = MediaGroup.create;
    var maxLength = MaxLength.create;
    var max = Max.create;
    var mark = mkDOM("mark");
    var mark$prime = mark([  ]);
    var mapDOM = mkDOM("map");
    var mapDOM$prime = mapDOM([  ]);
    var mainDOM = mkDOM("main");
    var mainDOM$prime = mainDOM([  ]);
    var loop = Loop.create;
    var list = List.create;
    var link = mkDOM("link");
    var link$prime = link([  ]);
    var linearGradient = mkDOM("linearGradient");
    var linearGradient$prime = linearGradient([  ]);
    var line = mkDOM("line");
    var line$prime = line([  ]);
    var li = mkDOM("li");
    var li$prime = li([  ]);
    var legend = mkDOM("legend");
    var legend$prime = legend([  ]);
    var lang = Lang.create;
    var labelProp = Label.create;
    var label = mkDOM("label");
    var label$prime = label([  ]);
    var keygen = mkDOM("keygen");
    var keygen$prime = keygen([  ]);
    var key = Key.create;
    var kbd = mkDOM("kbd");
    var kbd$prime = kbd([  ]);
    var ins = mkDOM("ins");
    var ins$prime = ins([  ]);
    var input = mkDOM("input");
    var input$prime = input([  ]);
    var img = mkDOM("img");
    var img$prime = img([  ]);
    var iframe = mkDOM("iframe");
    var iframe$prime = iframe([  ]);
    var idProp = Id.create;
    var icon = Icon.create;
    var i = mkDOM("i");
    var i$prime = i([  ]);
    var httpEquiv = HttpEquiv.create;
    var htmlFor = HtmlFor.create;
    var html = mkDOM("html");
    var html$prime = html([  ]);
    var hrefLang = HrefLang.create;
    var href = Href.create;
    var hr = mkDOM("hr");
    var hr$prime = hr([  ]);
    var hidden = Hidden.create;
    var height = Height.create;
    var header = mkDOM("header");
    var header$prime = header([  ]);
    var headDOM = mkDOM("head");
    var headDOM$prime = headDOM([  ]);
    var h6 = mkDOM("h6");
    var h6$prime = h6([  ]);
    var h5 = mkDOM("h5");
    var h5$prime = h5([  ]);
    var h4 = mkDOM("h4");
    var h4$prime = h4([  ]);
    var h3 = mkDOM("h3");
    var h3$prime = h3([  ]);
    var h2 = mkDOM("h2");
    var h2$prime = h2([  ]);
    var h1 = mkDOM("h1");
    var h1$prime = h1([  ]);
    var g = mkDOM("g");
    var g$prime = g([  ]);
    var frameBorder = FrameBorder.create;
    var formProp = Form.create;
    var formNoValidate = FormNoValidate.create;
    var form = mkDOM("form");
    var form$prime = form([  ]);
    var footer = mkDOM("footer");
    var footer$prime = footer([  ]);
    var figure = mkDOM("figure");
    var figure$prime = figure([  ]);
    var figcaption = mkDOM("figcaption");
    var figcaption$prime = figcaption([  ]);
    var fieldset = mkDOM("fieldset");
    var fieldset$prime = fieldset([  ]);
    var encType = EncType.create;
    var embed = mkDOM("embed");
    var embed$prime = embed([  ]);
    var em = mkDOM("em");
    var em$prime = em([  ]);
    var dt = mkDOM("dt");
    var dt$prime = dt([  ]);
    var draggable = Draggable.create;
    var download = Download.create;
    var dl = mkDOM("dl");
    var dl$prime = dl([  ]);
    var div = mkDOM("div");
    var div$prime = div([  ]);
    var disabled = Disabled.create;
    var dir = Dir.create;
    var dfn = mkDOM("dfn");
    var dfn$prime = dfn([  ]);
    var details = mkDOM("details");
    var details$prime = details([  ]);
    var del = mkDOM("del");
    var del$prime = del([  ]);
    var defs = mkDOM("defs");
    var defs$prime = defs([  ]);
    var defer = Defer.create;
    var dd = mkDOM("dd");
    var dd$prime = dd([  ]);
    var dateTime = DateTime.create;
    var dataSet = Data.create;
    var dangerouslySetInnerHTML = function (v) {
        return new DangerouslySetInnerHTML({
            __html: v
        });
    };
    var crossOrigin = CrossOrigin.create;
    var controls = Controls.create;
    var contextMenu = ContextMenu.create;
    var contentEditable = ContentEditable.create;
    var content = Content.create;
    var cols = Cols.create;
    var colgroup = mkDOM("colgroup");
    var colgroup$prime = colgroup([  ]);
    var colSpan = ColSpan.create;
    var col = mkDOM("col");
    var col$prime = col([  ]);
    var code = mkDOM("code");
    var code$prime = code([  ]);
    var className = ClassName.create;
    var cite = mkDOM("cite");
    var cite$prime = cite([  ]);
    var circle = mkDOM("circle");
    var circle$prime = circle([  ]);
    var checked = Checked.create;
    var charSet = CharSet.create;
    var cellSpacing = CellSpacing.create;
    var cellPadding = CellPadding.create;
    var caption = mkDOM("caption");
    var caption$prime = caption([  ]);
    var canvas = mkDOM("canvas");
    var canvas$prime = canvas([  ]);
    var button = mkDOM("button");
    var button$prime = button([  ]);
    var br = mkDOM("br");
    var br$prime = br([  ]);
    var body = mkDOM("body");
    var body$prime = body([  ]);
    var blockquote = mkDOM("blockquote");
    var blockquote$prime = blockquote([  ]);
    var big = mkDOM("big");
    var big$prime = big([  ]);
    var bdo = mkDOM("bdo");
    var bdo$prime = bdo([  ]);
    var bdi = mkDOM("bdi");
    var bdi$prime = bdi([  ]);
    var base = mkDOM("base");
    var base$prime = base([  ]);
    var b = mkDOM("b");
    var b$prime = b([  ]);
    var autoPlay = AutoPlay.create;
    var autoFocus = AutoFocus.create;
    var autoCorrect = AutoCorrect.create;
    var autoComplete = AutoComplete.create;
    var autoCapitalize = AutoCapitalize.create;
    var audio = mkDOM("audio");
    var audio$prime = audio([  ]);
    var async = Async.create;
    var aside = mkDOM("aside");
    var aside$prime = aside([  ]);
    var article = mkDOM("article");
    var article$prime = article([  ]);
    var ariaSet = Aria.create;
    var area = mkDOM("area");
    var area$prime = area([  ]);
    var alue = Value.create;
    var alt = Alt.create;
    var allowTransparency = AllowTransparency.create;
    var allowFullScreen = AllowFullScreen.create;
    var address = mkDOM("address");
    var address$prime = address([  ]);
    var action = Action.create;
    var accessKey = AccessKey.create;
    var accept = Accept.create;
    var abbr = mkDOM("abbr");
    var abbr$prime = abbr([  ]);
    var a = mkDOM("a");
    var a$prime = a([  ]);
    return {
        Accept: Accept, 
        AccessKey: AccessKey, 
        Action: Action, 
        AllowFullScreen: AllowFullScreen, 
        AllowTransparency: AllowTransparency, 
        Alt: Alt, 
        Aria: Aria, 
        Async: Async, 
        AutoCapitalize: AutoCapitalize, 
        AutoComplete: AutoComplete, 
        AutoCorrect: AutoCorrect, 
        AutoFocus: AutoFocus, 
        AutoPlay: AutoPlay, 
        CellPadding: CellPadding, 
        CellSpacing: CellSpacing, 
        CharSet: CharSet, 
        Checked: Checked, 
        ClassName: ClassName, 
        ColSpan: ColSpan, 
        Cols: Cols, 
        Content: Content, 
        ContentEditable: ContentEditable, 
        ContextMenu: ContextMenu, 
        Controls: Controls, 
        CrossOrigin: CrossOrigin, 
        DangerouslySetInnerHTML: DangerouslySetInnerHTML, 
        Data: Data, 
        DateTime: DateTime, 
        Defer: Defer, 
        Dir: Dir, 
        Disabled: Disabled, 
        Download: Download, 
        Draggable: Draggable, 
        EncType: EncType, 
        Form: Form, 
        FormNoValidate: FormNoValidate, 
        FrameBorder: FrameBorder, 
        Height: Height, 
        Hidden: Hidden, 
        Href: Href, 
        HrefLang: HrefLang, 
        HtmlFor: HtmlFor, 
        HttpEquiv: HttpEquiv, 
        Icon: Icon, 
        Id: Id, 
        Key: Key, 
        Label: Label, 
        Lang: Lang, 
        List: List, 
        Loop: Loop, 
        Max: Max, 
        MaxLength: MaxLength, 
        MediaGroup: MediaGroup, 
        Method: Method, 
        Min: Min, 
        Multiple: Multiple, 
        Muted: Muted, 
        Name: Name, 
        NoValidate: NoValidate, 
        OnBlur: OnBlur, 
        OnChange: OnChange, 
        OnClick: OnClick, 
        OnContextMenu: OnContextMenu, 
        OnCopy: OnCopy, 
        OnCut: OnCut, 
        OnDoubleClick: OnDoubleClick, 
        OnDrag: OnDrag, 
        OnDragEnd: OnDragEnd, 
        OnDragEnter: OnDragEnter, 
        OnDragExit: OnDragExit, 
        OnDragLeave: OnDragLeave, 
        OnDragOver: OnDragOver, 
        OnDragStart: OnDragStart, 
        OnDrop: OnDrop, 
        OnError: OnError, 
        OnFocus: OnFocus, 
        OnInput: OnInput, 
        OnKeyDown: OnKeyDown, 
        OnKeyPress: OnKeyPress, 
        OnKeyUp: OnKeyUp, 
        OnLoad: OnLoad, 
        OnMouseDown: OnMouseDown, 
        OnMouseEnter: OnMouseEnter, 
        OnMouseLeave: OnMouseLeave, 
        OnMouseMove: OnMouseMove, 
        OnMouseOut: OnMouseOut, 
        OnMouseOver: OnMouseOver, 
        OnMouseUp: OnMouseUp, 
        OnPaste: OnPaste, 
        OnReset: OnReset, 
        OnScroll: OnScroll, 
        OnSubmit: OnSubmit, 
        OnTouchCancel: OnTouchCancel, 
        OnTouchEnd: OnTouchEnd, 
        OnTouchMove: OnTouchMove, 
        OnTouchStart: OnTouchStart, 
        OnWheel: OnWheel, 
        Pattern: Pattern, 
        Placeholder: Placeholder, 
        Poster: Poster, 
        Preload: Preload, 
        Property: Property, 
        RadioGroup: RadioGroup, 
        ReadOnly: ReadOnly, 
        Ref: Ref, 
        Rel: Rel, 
        Required: Required, 
        Role: Role, 
        RowSpan: RowSpan, 
        Rows: Rows, 
        Sandbox: Sandbox, 
        Scope: Scope, 
        ScrollLeft: ScrollLeft, 
        ScrollTop: ScrollTop, 
        Scrolling: Scrolling, 
        Seamless: Seamless, 
        Selected: Selected, 
        Size: Size, 
        Span: Span, 
        SpellCheck: SpellCheck, 
        Src: Src, 
        SrcDoc: SrcDoc, 
        SrcSet: SrcSet, 
        Start: Start, 
        Step: Step, 
        Style: Style, 
        TabIndex: TabIndex, 
        Target: Target, 
        Title: Title, 
        Type: Type, 
        Value: Value, 
        Width: Width, 
        Wmode: Wmode, 
        a: a, 
        "a'": a$prime, 
        abbr: abbr, 
        "abbr'": abbr$prime, 
        accept: accept, 
        accessKey: accessKey, 
        action: action, 
        address: address, 
        "address'": address$prime, 
        allowFullScreen: allowFullScreen, 
        allowTransparency: allowTransparency, 
        alt: alt, 
        alue: alue, 
        area: area, 
        "area'": area$prime, 
        ariaSet: ariaSet, 
        article: article, 
        "article'": article$prime, 
        aside: aside, 
        "aside'": aside$prime, 
        async: async, 
        audio: audio, 
        "audio'": audio$prime, 
        autoCapitalize: autoCapitalize, 
        autoComplete: autoComplete, 
        autoCorrect: autoCorrect, 
        autoFocus: autoFocus, 
        autoPlay: autoPlay, 
        b: b, 
        "b'": b$prime, 
        base: base, 
        "base'": base$prime, 
        bdi: bdi, 
        "bdi'": bdi$prime, 
        bdo: bdo, 
        "bdo'": bdo$prime, 
        big: big, 
        "big'": big$prime, 
        blockquote: blockquote, 
        "blockquote'": blockquote$prime, 
        body: body, 
        "body'": body$prime, 
        br: br, 
        "br'": br$prime, 
        button: button, 
        "button'": button$prime, 
        canvas: canvas, 
        "canvas'": canvas$prime, 
        caption: caption, 
        "caption'": caption$prime, 
        cellPadding: cellPadding, 
        cellSpacing: cellSpacing, 
        charSet: charSet, 
        checked: checked, 
        circle: circle, 
        "circle'": circle$prime, 
        cite: cite, 
        "cite'": cite$prime, 
        className: className, 
        code: code, 
        "code'": code$prime, 
        col: col, 
        "col'": col$prime, 
        colSpan: colSpan, 
        colgroup: colgroup, 
        "colgroup'": colgroup$prime, 
        cols: cols, 
        content: content, 
        contentEditable: contentEditable, 
        contextMenu: contextMenu, 
        controls: controls, 
        crossOrigin: crossOrigin, 
        dangerouslySetInnerHTML: dangerouslySetInnerHTML, 
        dataSet: dataSet, 
        dateTime: dateTime, 
        dd: dd, 
        "dd'": dd$prime, 
        defer: defer, 
        defs: defs, 
        "defs'": defs$prime, 
        del: del, 
        "del'": del$prime, 
        details: details, 
        "details'": details$prime, 
        dfn: dfn, 
        "dfn'": dfn$prime, 
        dir: dir, 
        disabled: disabled, 
        div: div, 
        "div'": div$prime, 
        dl: dl, 
        "dl'": dl$prime, 
        download: download, 
        draggable: draggable, 
        dt: dt, 
        "dt'": dt$prime, 
        em: em, 
        "em'": em$prime, 
        embed: embed, 
        "embed'": embed$prime, 
        encType: encType, 
        fieldset: fieldset, 
        "fieldset'": fieldset$prime, 
        figcaption: figcaption, 
        "figcaption'": figcaption$prime, 
        figure: figure, 
        "figure'": figure$prime, 
        footer: footer, 
        "footer'": footer$prime, 
        form: form, 
        "form'": form$prime, 
        formNoValidate: formNoValidate, 
        formProp: formProp, 
        frameBorder: frameBorder, 
        g: g, 
        "g'": g$prime, 
        h1: h1, 
        "h1'": h1$prime, 
        h2: h2, 
        "h2'": h2$prime, 
        h3: h3, 
        "h3'": h3$prime, 
        h4: h4, 
        "h4'": h4$prime, 
        h5: h5, 
        "h5'": h5$prime, 
        h6: h6, 
        "h6'": h6$prime, 
        headDOM: headDOM, 
        "headDOM'": headDOM$prime, 
        header: header, 
        "header'": header$prime, 
        height: height, 
        hidden: hidden, 
        hr: hr, 
        "hr'": hr$prime, 
        href: href, 
        hrefLang: hrefLang, 
        html: html, 
        "html'": html$prime, 
        htmlFor: htmlFor, 
        httpEquiv: httpEquiv, 
        i: i, 
        "i'": i$prime, 
        icon: icon, 
        idProp: idProp, 
        iframe: iframe, 
        "iframe'": iframe$prime, 
        img: img, 
        "img'": img$prime, 
        input: input, 
        "input'": input$prime, 
        ins: ins, 
        "ins'": ins$prime, 
        kbd: kbd, 
        "kbd'": kbd$prime, 
        key: key, 
        keygen: keygen, 
        "keygen'": keygen$prime, 
        label: label, 
        "label'": label$prime, 
        labelProp: labelProp, 
        lang: lang, 
        legend: legend, 
        "legend'": legend$prime, 
        li: li, 
        "li'": li$prime, 
        line: line, 
        "line'": line$prime, 
        linearGradient: linearGradient, 
        "linearGradient'": linearGradient$prime, 
        link: link, 
        "link'": link$prime, 
        list: list, 
        loop: loop, 
        mainDOM: mainDOM, 
        "mainDOM'": mainDOM$prime, 
        mapDOM: mapDOM, 
        "mapDOM'": mapDOM$prime, 
        mark: mark, 
        "mark'": mark$prime, 
        max: max, 
        maxLength: maxLength, 
        mediaGroup: mediaGroup, 
        menu: menu, 
        "menu'": menu$prime, 
        menuitem: menuitem, 
        "menuitem'": menuitem$prime, 
        meta: meta, 
        "meta'": meta$prime, 
        meter: meter, 
        "meter'": meter$prime, 
        method: method, 
        min: min, 
        mkDOM: mkDOM, 
        multiple: multiple, 
        muted: muted, 
        name: name, 
        nav: nav, 
        "nav'": nav$prime, 
        noValidate: noValidate, 
        noscript: noscript, 
        "noscript'": noscript$prime, 
        object: object, 
        "object'": object$prime, 
        ol: ol, 
        "ol'": ol$prime, 
        onBlur: onBlur, 
        onChange: onChange, 
        onClick: onClick, 
        onContextMenu: onContextMenu, 
        onCopy: onCopy, 
        onCut: onCut, 
        onDoubleClick: onDoubleClick, 
        onDrag: onDrag, 
        onDragEnd: onDragEnd, 
        onDragEnter: onDragEnter, 
        onDragExit: onDragExit, 
        onDragLeave: onDragLeave, 
        onDragOver: onDragOver, 
        onDragStart: onDragStart, 
        onDrop: onDrop, 
        onError: onError, 
        onFocus: onFocus, 
        onInput: onInput, 
        onKeyDown: onKeyDown, 
        onKeyPress: onKeyPress, 
        onKeyUp: onKeyUp, 
        onLoad: onLoad, 
        onMouseDown: onMouseDown, 
        onMouseEnter: onMouseEnter, 
        onMouseLeave: onMouseLeave, 
        onMouseMove: onMouseMove, 
        onMouseOut: onMouseOut, 
        onMouseOver: onMouseOver, 
        onMouseUp: onMouseUp, 
        onPaste: onPaste, 
        onReset: onReset, 
        onScroll: onScroll, 
        onSubmit: onSubmit, 
        onTouchCancel: onTouchCancel, 
        onTouchEnd: onTouchEnd, 
        onTouchMove: onTouchMove, 
        onTouchStart: onTouchStart, 
        onWheel: onWheel, 
        optgroup: optgroup, 
        "optgroup'": optgroup$prime, 
        option: option, 
        "option'": option$prime, 
        output: output, 
        "output'": output$prime, 
        p: p, 
        "p'": p$prime, 
        param: param, 
        "param'": param$prime, 
        path: path, 
        "path'": path$prime, 
        pattern: pattern, 
        placeholder: placeholder, 
        polygon: polygon, 
        "polygon'": polygon$prime, 
        polyline: polyline, 
        "polyline'": polyline$prime, 
        poster: poster, 
        pre: pre, 
        "pre'": pre$prime, 
        preload: preload, 
        progress: progress, 
        "progress'": progress$prime, 
        property: property, 
        q: q, 
        "q'": q$prime, 
        radialGradient: radialGradient, 
        "radialGradient'": radialGradient$prime, 
        radioGroup: radioGroup, 
        readOnly: readOnly, 
        rect: rect, 
        "rect'": rect$prime, 
        ref: ref, 
        rel: rel, 
        required: required, 
        role: role, 
        rowSpan: rowSpan, 
        rows: rows, 
        rp: rp, 
        "rp'": rp$prime, 
        rt: rt, 
        "rt'": rt$prime, 
        ruby: ruby, 
        "ruby'": ruby$prime, 
        s: s, 
        "s'": s$prime, 
        samp: samp, 
        "samp'": samp$prime, 
        sandbox: sandbox, 
        scope: scope, 
        script: script, 
        "script'": script$prime, 
        scrollLeft: scrollLeft, 
        scrollTop: scrollTop, 
        scrolling: scrolling, 
        seamless: seamless, 
        section: section, 
        "section'": section$prime, 
        select: select, 
        "select'": select$prime, 
        selected: selected, 
        size: size, 
        small: small, 
        "small'": small$prime, 
        source: source, 
        "source'": source$prime, 
        span: span, 
        "span'": span$prime, 
        spanProp: spanProp, 
        spellCheck: spellCheck, 
        src: src, 
        srcDoc: srcDoc, 
        srcSet: srcSet, 
        start: start, 
        step: step, 
        stop: stop, 
        "stop'": stop$prime, 
        strong: strong, 
        "strong'": strong$prime, 
        style: style, 
        styleDOM: styleDOM, 
        "styleDOM'": styleDOM$prime, 
        sub: sub, 
        "sub'": sub$prime, 
        summary: summary, 
        "summary'": summary$prime, 
        sup: sup, 
        "sup'": sup$prime, 
        svg: svg, 
        "svg'": svg$prime, 
        tabIndex: tabIndex, 
        table: table, 
        "table'": table$prime, 
        target: target, 
        tbody: tbody, 
        "tbody'": tbody$prime, 
        td: td, 
        "td'": td$prime, 
        text: text, 
        textarea: textarea, 
        "textarea'": textarea$prime, 
        tfoot: tfoot, 
        "tfoot'": tfoot$prime, 
        th: th, 
        "th'": th$prime, 
        thead: thead, 
        "thead'": thead$prime, 
        time: time, 
        "time'": time$prime, 
        title: title, 
        "title'": title$prime, 
        titleProp: titleProp, 
        tr: tr, 
        "tr'": tr$prime, 
        track: track, 
        "track'": track$prime, 
        typeProp: typeProp, 
        u: u, 
        "u'": u$prime, 
        ul: ul, 
        "ul'": ul$prime, 
        value: value, 
        "var": $$var, 
        "var'": var$prime, 
        video: video, 
        "video'": video$prime, 
        wbr: wbr, 
        "wbr'": wbr$prime, 
        width: width, 
        wmode: wmode
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var React_DOM = PS.React_DOM;
    var React = PS.React;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    function getValue (e) {  return e.target.value;};
    var initialState = {
        name: ""
    };
    var ui = (function () {
        var updateName = function (e) {
            return React.writeState({
                name: getValue(e)
            });
        };
        var view = function (st) {
            return React_DOM.div([  ])([ React_DOM.p([  ])([ React_DOM.text("Your name: "), React_DOM.input([ React_DOM.onChange(updateName) ])([  ]) ]), (function () {
                if (st.name === "") {
                    return React_DOM.p([  ])([ React_DOM.text("Please enter your name.") ]);
                };
                return React_DOM.p([  ])([ React_DOM.text("Merry Christmas, "), React_DOM.text(st.name), React_DOM.text("!") ]);
            })() ]);
        };
        return React.mkUI((function () {
            var _70 = {};
            for (var _71 in React.spec) {
                if (React.spec.hasOwnProperty(_71)) {
                    _70[_71] = React.spec[_71];
                };
            };
            _70.getInitialState = Prelude.pure(Control_Monad_Eff.applicativeEff)(initialState);
            return _70;
        })())(Prelude["<$>"](Control_Monad_Eff.functorEff)(view)(React.readState));
    })();
    var main = (function () {
        var component = React_DOM.div([  ])([ ui({}) ]);
        return React.renderToBody(component);
    })();
    return {
        getValue: getValue, 
        initialState: initialState, 
        main: main, 
        ui: ui
    };
})();
PS.Main.main();
