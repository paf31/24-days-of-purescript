(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Alt($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
    this["<|>"] = $less$bar$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$bar$greater = function (dict) {
    return dict["<|>"];
};
module.exports = {
    "<|>": $less$bar$greater, 
    Alt: Alt
};

},{"Prelude":30}],2:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Lazy = require("Control.Lazy");
var Control_Alt = require("Control.Alt");
function Alternative(__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
    this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
};
var some = function (__dict_Alternative_0) {
    return function (__dict_Lazy1_1) {
        return function (v) {
            return Prelude["<*>"]((__dict_Alternative_0["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_0["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_1)(function (_) {
                return many(__dict_Alternative_0)(__dict_Lazy1_1)(v);
            }));
        };
    };
};
var many = function (__dict_Alternative_2) {
    return function (__dict_Lazy1_3) {
        return function (v) {
            return Control_Alt["<|>"]((__dict_Alternative_2["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_2)(__dict_Lazy1_3)(v))(Prelude.pure(__dict_Alternative_2["__superclass_Prelude.Applicative_0"]())([  ]));
        };
    };
};
module.exports = {
    Alternative: Alternative, 
    many: many, 
    some: some
};

},{"Control.Alt":1,"Control.Lazy":6,"Prelude":30}],3:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var $less$times = function (__dict_Apply_0) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](__dict_Apply_0)(Prelude["<$>"](__dict_Apply_0["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
        };
    };
};
var $times$greater = function (__dict_Apply_1) {
    return function (a) {
        return function (b) {
            return Prelude["<*>"](__dict_Apply_1)(Prelude["<$>"](__dict_Apply_1["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
        };
    };
};
var lift5 = function (__dict_Apply_2) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return function (e) {
                            return Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<*>"](__dict_Apply_2)(Prelude["<$>"](__dict_Apply_2["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                        };
                    };
                };
            };
        };
    };
};
var lift4 = function (__dict_Apply_3) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return function (d) {
                        return Prelude["<*>"](__dict_Apply_3)(Prelude["<*>"](__dict_Apply_3)(Prelude["<*>"](__dict_Apply_3)(Prelude["<$>"](__dict_Apply_3["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                    };
                };
            };
        };
    };
};
var lift3 = function (__dict_Apply_4) {
    return function (f) {
        return function (a) {
            return function (b) {
                return function (c) {
                    return Prelude["<*>"](__dict_Apply_4)(Prelude["<*>"](__dict_Apply_4)(Prelude["<$>"](__dict_Apply_4["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                };
            };
        };
    };
};
var lift2 = function (__dict_Apply_5) {
    return function (f) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_5)(Prelude["<$>"](__dict_Apply_5["__superclass_Prelude.Functor_0"]())(f)(a))(b);
            };
        };
    };
};
var forever = function (__dict_Apply_6) {
    return function (a) {
        return $times$greater(__dict_Apply_6)(a)(forever(__dict_Apply_6)(a));
    };
};
module.exports = {
    "*>": $times$greater, 
    "<*": $less$times, 
    forever: forever, 
    lift2: lift2, 
    lift3: lift3, 
    lift4: lift4, 
    lift5: lift5
};

},{"Prelude":30}],4:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Comonad(__superclass_Control$dotExtend$dotExtend_0, extract) {
    this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
    this.extract = extract;
};
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad, 
    extract: extract
};

},{"Prelude":30}],5:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Extend($less$less$eq, __superclass_Prelude$dotFunctor_0) {
    this["<<="] = $less$less$eq;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$less$eq = function (dict) {
    return dict["<<="];
};
var $eq$less$eq = function (__dict_Extend_0) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f($less$less$eq(__dict_Extend_0)(g)(w));
            };
        };
    };
};
var $eq$greater$eq = function (__dict_Extend_1) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g($less$less$eq(__dict_Extend_1)(f)(w));
            };
        };
    };
};
var $eq$greater$greater = function (__dict_Extend_2) {
    return function (w) {
        return function (f) {
            return $less$less$eq(__dict_Extend_2)(f)(w);
        };
    };
};
var extendArr = function (__dict_Semigroup_3) {
    return new Extend(function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Prelude["<>"](__dict_Semigroup_3)(w)(w$prime));
                });
            };
        };
    }, function () {
        return Prelude.functorArr;
    });
};
var duplicate = function (__dict_Extend_4) {
    return function (w) {
        return $less$less$eq(__dict_Extend_4)(Prelude.id(Prelude.categoryArr))(w);
    };
};
module.exports = {
    "<<=": $less$less$eq, 
    "=<=": $eq$less$eq, 
    "=>=": $eq$greater$eq, 
    "=>>": $eq$greater$greater, 
    Extend: Extend, 
    duplicate: duplicate, 
    extendArr: extendArr
};

},{"Prelude":30}],6:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Lazy(defer) {
    this.defer = defer;
};
function Lazy1(defer1) {
    this.defer1 = defer1;
};
function Lazy2(defer2) {
    this.defer2 = defer2;
};
var defer2 = function (dict) {
    return dict.defer2;
};
var fix2 = function (__dict_Lazy2_0) {
    return function (f) {
        return defer2(__dict_Lazy2_0)(function (_) {
            return f(fix2(__dict_Lazy2_0)(f));
        });
    };
};
var defer1 = function (dict) {
    return dict.defer1;
};
var fix1 = function (__dict_Lazy1_1) {
    return function (f) {
        return defer1(__dict_Lazy1_1)(function (_) {
            return f(fix1(__dict_Lazy1_1)(f));
        });
    };
};
var defer = function (dict) {
    return dict.defer;
};
var fix = function (__dict_Lazy_2) {
    return function (f) {
        return defer(__dict_Lazy_2)(function (_) {
            return f(fix(__dict_Lazy_2)(f));
        });
    };
};
module.exports = {
    Lazy: Lazy, 
    Lazy1: Lazy1, 
    Lazy2: Lazy2, 
    defer: defer, 
    defer1: defer1, 
    defer2: defer2, 
    fix: fix, 
    fix1: fix1, 
    fix2: fix2
};

},{"Prelude":30}],7:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");

  function newRef(val) {
    return function () {
      return { value: val };
    };
  }
;

  function readRef(ref) {
    return function() {
      return ref.value;
    };
  }
;

  function modifyRef$prime(ref) {
    return function(f) {
      return function() {
        var t = f(ref.value);
        ref.value = t.newState;
        return t.retVal;
      };
    };
  }
;

  function writeRef(ref) {
    return function(val) {
      return function() {
        ref.value = val;
        return {};
      };
    };
  }
;
var modifyRef = function (ref) {
    return function (f) {
        return modifyRef$prime(ref)(function (s) {
            return {
                newState: f(s), 
                retVal: Prelude.unit
            };
        });
    };
};
module.exports = {
    modifyRef: modifyRef, 
    "modifyRef'": modifyRef$prime, 
    newRef: newRef, 
    readRef: readRef, 
    writeRef: writeRef
};

},{"Prelude":30}],8:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function returnE(a) {  return function() {    return a;  };};
function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
function runPure(f) {  return f();};
function untilE(f) {  return function() {    while (!f());    return {};  };};
function whileE(f) {  return function(a) {    return function() {      while (f()) {        a();      }      return {};    };  };};
function forE(lo) {  return function(hi) {    return function(f) {      return function() {        for (var i = lo; i < hi; i++) {          f(i)();        }      };    };  };};
function foreachE(as) {  return function(f) {    return function() {      for (var i = 0; i < as.length; i++) {        f(as[i])();      }    };  };};
var monadEff = new Prelude.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Prelude.Bind(bindE, function () {
    return applyEff;
});
var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
    return functorEff;
});
var applicativeEff = new Prelude.Applicative(function () {
    return applyEff;
}, returnE);
var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
module.exports = {
    applicativeEff: applicativeEff, 
    applyEff: applyEff, 
    bindE: bindE, 
    bindEff: bindEff, 
    forE: forE, 
    foreachE: foreachE, 
    functorEff: functorEff, 
    monadEff: monadEff, 
    returnE: returnE, 
    runPure: runPure, 
    untilE: untilE, 
    whileE: whileE
};

},{"Prelude":30}],9:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function MonadTrans(lift) {
    this.lift = lift;
};
var lift = function (dict) {
    return dict.lift;
};
module.exports = {
    MonadTrans: MonadTrans, 
    lift: lift
};

},{"Prelude":30}],10:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Plus = require("Control.Plus");
function MonadPlus(__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
    this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
};
var guard = function (__dict_MonadPlus_0) {
    return function (_83) {
        if (_83) {
            return Prelude["return"](__dict_MonadPlus_0["__superclass_Prelude.Monad_0"]())(Prelude.unit);
        };
        if (!_83) {
            return Control_Plus.empty((__dict_MonadPlus_0["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
        };
        throw new Error("Failed pattern match");
    };
};
module.exports = {
    MonadPlus: MonadPlus, 
    guard: guard
};

},{"Control.Plus":11,"Prelude":30}],11:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function Plus(__superclass_Control$dotAlt$dotAlt_0, empty) {
    this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
    this.empty = empty;
};
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus, 
    empty: empty
};

},{"Prelude":30}],12:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Prelude_Unsafe = require("Prelude.Unsafe");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
function length (xs) {  return xs.length;};
function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
function reverse (l) {  return l.slice().reverse();};
function drop (n) {  return function (l) {    return l.slice(n);  };};
function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
var $dot$dot = range;
var $bang$bang = function (xs) {
    return function (n) {
        var isInt = function (n_1) {
            return n_1 !== ~~n_1;
        };
        return n < 0 || (n >= length(xs) || isInt(n)) ? Data_Maybe.Nothing.value : new Data_Maybe.Just(xs[n]);
    };
};
var take = function (n) {
    return slice(0)(n);
};
var tail = function (_121) {
    if (_121.length >= 1) {
        var _554 = _121.slice(1);
        return new Data_Maybe.Just(_554);
    };
    return Data_Maybe.Nothing.value;
};
var span = (function () {
    var go = function (__copy__137) {
        return function (__copy__138) {
            return function (__copy__139) {
                var _137 = __copy__137;
                var _138 = __copy__138;
                var _139 = __copy__139;
                tco: while (true) {
                    if (_139.length >= 1) {
                        var _559 = _139.slice(1);
                        if (_138(_139[0])) {
                            var __tco__137 = Prelude[":"](_139[0])(_137);
                            var __tco__138 = _138;
                            _137 = __tco__137;
                            _138 = __tco__138;
                            _139 = _559;
                            continue tco;
                        };
                    };
                    return {
                        init: reverse(_137), 
                        rest: _139
                    };
                };
            };
        };
    };
    return go([  ]);
})();
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var _560 = comp(x)(y);
                if (_560 instanceof Prelude.GT) {
                    return 1;
                };
                if (_560 instanceof Prelude.EQ) {
                    return 0;
                };
                if (_560 instanceof Prelude.LT) {
                    return -1;
                };
                throw new Error("Failed pattern match");
            };
        };
        return sortJS(comp$prime)(xs);
    };
};
var sort = function (__dict_Ord_0) {
    return function (xs) {
        return sortBy(Prelude.compare(__dict_Ord_0))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var semigroupArray = new Prelude.Semigroup(append);
var $$null = function (_123) {
    if (_123.length === 0) {
        return true;
    };
    return false;
};
var nubBy = function (_130) {
    return function (_131) {
        if (_131.length === 0) {
            return [  ];
        };
        if (_131.length >= 1) {
            var _565 = _131.slice(1);
            return Prelude[":"](_131[0])(nubBy(_130)(filter(function (y) {
                return !_130(_131[0])(y);
            })(_565)));
        };
        throw new Error("Failed pattern match");
    };
};
var nub = function (__dict_Eq_1) {
    return nubBy(Prelude["=="](__dict_Eq_1));
};
var mapMaybe = function (f) {
    return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
};
var last = function (__copy__120) {
    var _120 = __copy__120;
    tco: while (true) {
        if (_120.length >= 1) {
            var _568 = _120.slice(1);
            if (_568.length === 0) {
                return new Data_Maybe.Just(_120[0]);
            };
        };
        if (_120.length >= 1) {
            var _570 = _120.slice(1);
            _120 = _570;
            continue tco;
        };
        return Data_Maybe.Nothing.value;
    };
};
var intersectBy = function (_127) {
    return function (_128) {
        return function (_129) {
            if (_128.length === 0) {
                return [  ];
            };
            if (_129.length === 0) {
                return [  ];
            };
            var el = function (x) {
                return findIndex(_127(x))(_129) >= 0;
            };
            return filter(el)(_128);
        };
    };
};
var intersect = function (__dict_Eq_2) {
    return intersectBy(Prelude["=="](__dict_Eq_2));
};
var init = function (_122) {
    if (_122.length === 0) {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just(slice(0)(length(_122) - 1)(_122));
};
var head = function (_119) {
    if (_119.length >= 1) {
        var _577 = _119.slice(1);
        return new Data_Maybe.Just(_119[0]);
    };
    return Data_Maybe.Nothing.value;
};
var groupBy = (function () {
    var go = function (__copy__134) {
        return function (__copy__135) {
            return function (__copy__136) {
                var _134 = __copy__134;
                var _135 = __copy__135;
                var _136 = __copy__136;
                tco: while (true) {
                    if (_136.length === 0) {
                        return reverse(_134);
                    };
                    if (_136.length >= 1) {
                        var _582 = _136.slice(1);
                        var sp = span(_135(_136[0]))(_582);
                        var __tco__134 = Prelude[":"](Prelude[":"](_136[0])(sp.init))(_134);
                        var __tco__135 = _135;
                        _134 = __tco__134;
                        _135 = __tco__135;
                        _136 = sp.rest;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return go([  ]);
})();
var group = function (__dict_Eq_3) {
    return function (xs) {
        return groupBy(Prelude["=="](__dict_Eq_3))(xs);
    };
};
var group$prime = function (__dict_Ord_4) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_4["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_4));
};
var functorArray = new Prelude.Functor(map);
var elemLastIndex = function (__dict_Eq_5) {
    return function (x) {
        return findLastIndex(Prelude["=="](__dict_Eq_5)(x));
    };
};
var elemIndex = function (__dict_Eq_6) {
    return function (x) {
        return findIndex(Prelude["=="](__dict_Eq_6)(x));
    };
};
var deleteBy = function (_124) {
    return function (_125) {
        return function (_126) {
            if (_126.length === 0) {
                return [  ];
            };
            var _586 = findIndex(_124(_125))(_126);
            if (_586 < 0) {
                return _126;
            };
            return deleteAt(_586)(1)(_126);
        };
    };
};
var $$delete = function (__dict_Eq_7) {
    return deleteBy(Prelude["=="](__dict_Eq_7));
};
var $bslash$bslash = function (__dict_Eq_8) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy__132) {
                return function (__copy__133) {
                    var _132 = __copy__132;
                    var _133 = __copy__133;
                    tco: while (true) {
                        if (_133.length === 0) {
                            return _132;
                        };
                        if (_132.length === 0) {
                            return [  ];
                        };
                        if (_133.length >= 1) {
                            var _590 = _133.slice(1);
                            var __tco__132 = $$delete(__dict_Eq_8)(_133[0])(_132);
                            _132 = __tco__132;
                            _133 = _590;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
            return go(xs)(ys);
        };
    };
};
var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
var monadArray = new Prelude.Monad(function () {
    return applicativeArray;
}, function () {
    return bindArray;
});
var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
    return applyArray;
});
var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
    return functorArray;
});
var applicativeArray = new Prelude.Applicative(function () {
    return applyArray;
}, singleton);
var altArray = new Control_Alt.Alt(append, function () {
    return functorArray;
});
var plusArray = new Control_Plus.Plus(function () {
    return altArray;
}, [  ]);
var alternativeArray = new Control_Alternative.Alternative(function () {
    return plusArray;
}, function () {
    return applicativeArray;
});
var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
    return alternativeArray;
}, function () {
    return monadArray;
});
module.exports = {
    "!!": $bang$bang, 
    "..": $dot$dot, 
    "\\\\": $bslash$bslash, 
    altArray: altArray, 
    alternativeArray: alternativeArray, 
    append: append, 
    applicativeArray: applicativeArray, 
    applyArray: applyArray, 
    bindArray: bindArray, 
    catMaybes: catMaybes, 
    concat: concat, 
    concatMap: concatMap, 
    "delete": $$delete, 
    deleteAt: deleteAt, 
    deleteBy: deleteBy, 
    drop: drop, 
    elemIndex: elemIndex, 
    elemLastIndex: elemLastIndex, 
    filter: filter, 
    findIndex: findIndex, 
    findLastIndex: findLastIndex, 
    functorArray: functorArray, 
    group: group, 
    "group'": group$prime, 
    groupBy: groupBy, 
    head: head, 
    init: init, 
    insertAt: insertAt, 
    intersect: intersect, 
    intersectBy: intersectBy, 
    last: last, 
    length: length, 
    map: map, 
    mapMaybe: mapMaybe, 
    monadArray: monadArray, 
    monadPlusArray: monadPlusArray, 
    nub: nub, 
    nubBy: nubBy, 
    "null": $$null, 
    plusArray: plusArray, 
    range: range, 
    reverse: reverse, 
    semigroupArray: semigroupArray, 
    singleton: singleton, 
    snoc: snoc, 
    sort: sort, 
    sortBy: sortBy, 
    span: span, 
    tail: tail, 
    take: take, 
    updateAt: updateAt, 
    zipWith: zipWith
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.MonadPlus":10,"Control.Plus":11,"Data.Maybe":18,"Prelude":30,"Prelude.Unsafe":29}],13:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
function Left(value0) {
    this.value0 = value0;
};
Left.create = function (value0) {
    return new Left(value0);
};
function Right(value0) {
    this.value0 = value0;
};
Right.create = function (value0) {
    return new Right(value0);
};
var showEither = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_94) {
            if (_94 instanceof Left) {
                return "Left (" + (Prelude.show(__dict_Show_0)(_94.value0) + ")");
            };
            if (_94 instanceof Right) {
                return "Right (" + (Prelude.show(__dict_Show_1)(_94.value0) + ")");
            };
            throw new Error("Failed pattern match");
        });
    };
};
var functorEither = new Prelude.Functor(function (_88) {
    return function (_89) {
        if (_89 instanceof Left) {
            return new Left(_89.value0);
        };
        if (_89 instanceof Right) {
            return new Right(_88(_89.value0));
        };
        throw new Error("Failed pattern match");
    };
});
var eqEither = function (__dict_Eq_4) {
    return function (__dict_Eq_5) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqEither(__dict_Eq_4)(__dict_Eq_5))(a)(b);
            };
        }, function (_95) {
            return function (_96) {
                if (_95 instanceof Left && _96 instanceof Left) {
                    return Prelude["=="](__dict_Eq_4)(_95.value0)(_96.value0);
                };
                if (_95 instanceof Right && _96 instanceof Right) {
                    return Prelude["=="](__dict_Eq_5)(_95.value0)(_96.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (__dict_Ord_2) {
    return function (__dict_Ord_3) {
        return new Prelude.Ord(function () {
            return eqEither(__dict_Ord_2["__superclass_Prelude.Eq_0"]())(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
        }, function (_97) {
            return function (_98) {
                if (_97 instanceof Left && _98 instanceof Left) {
                    return Prelude.compare(__dict_Ord_2)(_97.value0)(_98.value0);
                };
                if (_97 instanceof Right && _98 instanceof Right) {
                    return Prelude.compare(__dict_Ord_3)(_97.value0)(_98.value0);
                };
                if (_97 instanceof Left) {
                    return Prelude.LT.value;
                };
                if (_98 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
};
var either = function (_85) {
    return function (_86) {
        return function (_87) {
            if (_87 instanceof Left) {
                return _85(_87.value0);
            };
            if (_87 instanceof Right) {
                return _86(_87.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var applyEither = new Prelude.Apply(function (_90) {
    return function (_91) {
        if (_90 instanceof Left) {
            return new Left(_90.value0);
        };
        if (_90 instanceof Right) {
            return Prelude["<$>"](functorEither)(_90.value0)(_91);
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorEither;
});
var bindEither = new Prelude.Bind(either(function (e) {
    return function (_) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}), function () {
    return applyEither;
});
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function (_92) {
    return function (_93) {
        if (_92 instanceof Left) {
            return _93;
        };
        return _92;
    };
}, function () {
    return functorEither;
});
module.exports = {
    Left: Left, 
    Right: Right, 
    altEither: altEither, 
    applicativeEither: applicativeEither, 
    applyEither: applyEither, 
    bindEither: bindEither, 
    either: either, 
    eqEither: eqEither, 
    functorEither: functorEither, 
    isLeft: isLeft, 
    isRight: isRight, 
    monadEither: monadEither, 
    ordEither: ordEither, 
    showEither: showEither
};

},{"Control.Alt":1,"Prelude":30}],14:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Ref = {
    create: function (value) {
        return value;
    }
};
var liftRef = function (_61) {
    return function (_62) {
        return function (_63) {
            return _61(_62)(_63);
        };
    };
};
var functorRef = new Prelude.Functor(function (_64) {
    return function (_65) {
        return _64(_65);
    };
});
var eqRef = new Prelude.Eq(liftRef(Prelude.refIneq), liftRef(Prelude.refEq));
module.exports = {
    Ref: Ref, 
    eqRef: eqRef, 
    functorRef: functorRef, 
    liftRef: liftRef
};

},{"Prelude":30}],15:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Monoid = require("Data.Monoid");
var Prelude = require("Prelude");
var Control_Apply = require("Control.Apply");
var Data_Monoid_First = require("Data.Monoid.First");
var Data_Tuple = require("Data.Tuple");
var Data_Eq = require("Data.Eq");
var Data_Maybe = require("Data.Maybe");
var Data_Either = require("Data.Either");
function Foldable(foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};

  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      }
    }
  };

  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      }
    }
  };
var foldr = function (dict) {
    return dict.foldr;
};
var traverse_ = function (__dict_Applicative_0) {
    return function (__dict_Foldable_1) {
        return function (f) {
            return foldr(__dict_Foldable_1)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
        };
    };
};
var for_ = function (__dict_Applicative_2) {
    return function (__dict_Foldable_3) {
        return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
    };
};
var sequence_ = function (__dict_Applicative_4) {
    return function (__dict_Foldable_5) {
        return traverse_(__dict_Applicative_4)(__dict_Foldable_5)(Prelude.id(Prelude.categoryArr));
    };
};
var foldl = function (dict) {
    return dict.foldl;
};
var intercalate = function (__dict_Foldable_6) {
    return function (__dict_Monoid_7) {
        return function (sep) {
            return function (xs) {
                var go = function (_331) {
                    return function (_332) {
                        if (_331.init) {
                            return {
                                init: false, 
                                acc: _332
                            };
                        };
                        return {
                            init: false, 
                            acc: Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(_331.acc)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(sep)(_332))
                        };
                    };
                };
                return (foldl(__dict_Foldable_6)(go)({
                    init: true, 
                    acc: Data_Monoid.mempty(__dict_Monoid_7)
                })(xs)).acc;
            };
        };
    };
};
var mconcat = function (__dict_Foldable_8) {
    return function (__dict_Monoid_9) {
        return foldl(__dict_Foldable_8)(Prelude["<>"](__dict_Monoid_9["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_9));
    };
};
var or = function (__dict_Foldable_10) {
    return foldl(__dict_Foldable_10)(Prelude["||"](Prelude.boolLikeBoolean))(false);
};
var product = function (__dict_Foldable_11) {
    return foldl(__dict_Foldable_11)(Prelude["*"](Prelude.numNumber))(1);
};
var sum = function (__dict_Foldable_12) {
    return foldl(__dict_Foldable_12)(Prelude["+"](Prelude.numNumber))(0);
};
var foldableTuple = new Foldable(function (__dict_Monoid_13) {
    return function (_329) {
        return function (_330) {
            return _329(_330.value1);
        };
    };
}, function (_326) {
    return function (_327) {
        return function (_328) {
            return _326(_327)(_328.value1);
        };
    };
}, function (_323) {
    return function (_324) {
        return function (_325) {
            return _323(_325.value1)(_324);
        };
    };
});
var foldableRef = new Foldable(function (__dict_Monoid_14) {
    return function (_321) {
        return function (_322) {
            return _321(_322);
        };
    };
}, function (_318) {
    return function (_319) {
        return function (_320) {
            return _318(_319)(_320);
        };
    };
}, function (_315) {
    return function (_316) {
        return function (_317) {
            return _315(_317)(_316);
        };
    };
});
var foldableMaybe = new Foldable(function (__dict_Monoid_15) {
    return function (_313) {
        return function (_314) {
            if (_314 instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(__dict_Monoid_15);
            };
            if (_314 instanceof Data_Maybe.Just) {
                return _313(_314.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_310) {
    return function (_311) {
        return function (_312) {
            if (_312 instanceof Data_Maybe.Nothing) {
                return _311;
            };
            if (_312 instanceof Data_Maybe.Just) {
                return _310(_311)(_312.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_307) {
    return function (_308) {
        return function (_309) {
            if (_309 instanceof Data_Maybe.Nothing) {
                return _308;
            };
            if (_309 instanceof Data_Maybe.Just) {
                return _307(_309.value0)(_308);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableEither = new Foldable(function (__dict_Monoid_16) {
    return function (_305) {
        return function (_306) {
            if (_306 instanceof Data_Either.Left) {
                return Data_Monoid.mempty(__dict_Monoid_16);
            };
            if (_306 instanceof Data_Either.Right) {
                return _305(_306.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_302) {
    return function (_303) {
        return function (_304) {
            if (_304 instanceof Data_Either.Left) {
                return _303;
            };
            if (_304 instanceof Data_Either.Right) {
                return _302(_303)(_304.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
}, function (_299) {
    return function (_300) {
        return function (_301) {
            if (_301 instanceof Data_Either.Left) {
                return _300;
            };
            if (_301 instanceof Data_Either.Right) {
                return _299(_301.value0)(_300);
            };
            throw new Error("Failed pattern match");
        };
    };
});
var foldableArray = new Foldable(function (__dict_Monoid_17) {
    return function (f) {
        return function (xs) {
            return foldr(foldableArray)(function (x) {
                return function (acc) {
                    return Prelude["<>"](__dict_Monoid_17["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(__dict_Monoid_17))(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldlArray(f)(z)(xs);
        };
    };
}, function (f) {
    return function (z) {
        return function (xs) {
            return foldrArray(f)(z)(xs);
        };
    };
});
var foldMap = function (dict) {
    return dict.foldMap;
};
var lookup = function (__dict_Eq_18) {
    return function (__dict_Foldable_19) {
        return function (a) {
            return function (f) {
                return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_19)(Data_Monoid_First.monoidFirst)(function (_298) {
                    return Prelude["=="](__dict_Eq_18)(a)(_298.value0) ? new Data_Maybe.Just(_298.value1) : Data_Maybe.Nothing.value;
                })(f));
            };
        };
    };
};
var fold = function (__dict_Foldable_20) {
    return function (__dict_Monoid_21) {
        return foldMap(__dict_Foldable_20)(__dict_Monoid_21)(Prelude.id(Prelude.categoryArr));
    };
};
var find = function (__dict_Foldable_22) {
    return function (p) {
        return function (f) {
            var _1062 = foldMap(__dict_Foldable_22)(Data_Monoid.monoidArray)(function (x) {
                return p(x) ? [ x ] : [  ];
            })(f);
            if (_1062.length >= 1) {
                var _1064 = _1062.slice(1);
                return new Data_Maybe.Just(_1062[0]);
            };
            if (_1062.length === 0) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
};
var any = function (__dict_Foldable_23) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_23)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};
var elem = function (__dict_Eq_24) {
    return function (__dict_Foldable_25) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_25))(Prelude["=="](__dict_Eq_24));
    };
};
var notElem = function (__dict_Eq_26) {
    return function (__dict_Foldable_27) {
        return function (x) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_26)(__dict_Foldable_27)(x));
        };
    };
};
var and = function (__dict_Foldable_28) {
    return foldl(__dict_Foldable_28)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
};
var all = function (__dict_Foldable_29) {
    return function (p) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_29)(Data_Monoid.monoidArray)(function (x) {
            return [ p(x) ];
        }));
    };
};
module.exports = {
    Foldable: Foldable, 
    all: all, 
    and: and, 
    any: any, 
    elem: elem, 
    find: find, 
    fold: fold, 
    foldMap: foldMap, 
    foldableArray: foldableArray, 
    foldableEither: foldableEither, 
    foldableMaybe: foldableMaybe, 
    foldableRef: foldableRef, 
    foldableTuple: foldableTuple, 
    foldl: foldl, 
    foldlArray: foldlArray, 
    foldr: foldr, 
    foldrArray: foldrArray, 
    for_: for_, 
    intercalate: intercalate, 
    lookup: lookup, 
    mconcat: mconcat, 
    notElem: notElem, 
    or: or, 
    product: product, 
    sequence_: sequence_, 
    sum: sum, 
    traverse_: traverse_
};

},{"Control.Apply":3,"Data.Either":13,"Data.Eq":14,"Data.Maybe":18,"Data.Monoid":20,"Data.Monoid.First":19,"Data.Tuple":24,"Prelude":30}],16:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Function = require("Data.Function");
var Data_Either = require("Data.Either");
function TypeMismatch(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
TypeMismatch.create = function (value0) {
    return function (value1) {
        return new TypeMismatch(value0, value1);
    };
};
function ErrorAtIndex(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
ErrorAtIndex.create = function (value0) {
    return function (value1) {
        return new ErrorAtIndex(value0, value1);
    };
};
function ErrorAtProperty(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
ErrorAtProperty.create = function (value0) {
    return function (value1) {
        return new ErrorAtProperty(value0, value1);
    };
};
function JSONError(value0) {
    this.value0 = value0;
};
JSONError.create = function (value0) {
    return new JSONError(value0);
};

  function parseJSONImpl(left, right, str) {
    try {
      return right(JSON.parse(str));
    } catch (e) {
      return left(e.toString());
    }
  }
  ;

  function toForeign(value) {
    return value;
  }
  ;

  function unsafeFromForeign(value) {
    return value;
  }
  ;

  function typeOf(value) {
    return typeof value;
  }
  ;

  function tagOf(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  }
  ;

  function isNull(value) {
    return value === null;
  }
  ;

  function isUndefined(value) {
    return value === undefined;
  }
  ;

  var isArray = Array.isArray || function(value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  };
  ;
var unsafeReadPrim = function (_140) {
    return function (_141) {
        if (tagOf(_141) === _140) {
            return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(_141));
        };
        return new Data_Either.Left(new TypeMismatch(_140, tagOf(_141)));
    };
};
var showForeignError = new Prelude.Show(function (_143) {
    if (_143 instanceof TypeMismatch) {
        return "Type mismatch: expected " + (_143.value0 + (", found " + _143.value1));
    };
    if (_143 instanceof ErrorAtIndex) {
        return "Error at array index " + (Prelude.show(Prelude.showNumber)(_143.value0) + (": " + Prelude.show(showForeignError)(_143.value1)));
    };
    if (_143 instanceof ErrorAtProperty) {
        return "Error at property " + (Prelude.show(Prelude.showString)(_143.value0) + (": " + Prelude.show(showForeignError)(_143.value1)));
    };
    if (_143 instanceof JSONError) {
        return "JSON error: " + _143.value0;
    };
    throw new Error("Failed pattern match");
});
var readString = unsafeReadPrim("String");
var readNumber = unsafeReadPrim("Number");
var readBoolean = unsafeReadPrim("Boolean");
var readArray = function (_142) {
    if (isArray(_142)) {
        return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(_142));
    };
    return new Data_Either.Left(new TypeMismatch("array", tagOf(_142)));
};
var parseJSON = function (json) {
    return parseJSONImpl(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Either.Left.create)(JSONError.create), Data_Either.Right.create, json);
};
var eqForeignError = new Prelude.Eq(function (a) {
    return function (b) {
        return !Prelude["=="](eqForeignError)(a)(b);
    };
}, function (_144) {
    return function (_145) {
        if (_144 instanceof TypeMismatch && _145 instanceof TypeMismatch) {
            return _144.value0 === _145.value0 && _144.value1 === _145.value1;
        };
        if (_144 instanceof ErrorAtIndex && _145 instanceof ErrorAtIndex) {
            return _144.value0 === _145.value0 && Prelude["=="](eqForeignError)(_144.value1)(_145.value1);
        };
        if (_144 instanceof ErrorAtProperty && _145 instanceof ErrorAtProperty) {
            return _144.value0 === _145.value0 && Prelude["=="](eqForeignError)(_144.value1)(_145.value1);
        };
        if (_144 instanceof JSONError && _145 instanceof JSONError) {
            return _144.value0 === _145.value0;
        };
        return false;
    };
});
module.exports = {
    ErrorAtIndex: ErrorAtIndex, 
    ErrorAtProperty: ErrorAtProperty, 
    JSONError: JSONError, 
    TypeMismatch: TypeMismatch, 
    eqForeignError: eqForeignError, 
    isArray: isArray, 
    isNull: isNull, 
    isUndefined: isUndefined, 
    parseJSON: parseJSON, 
    readArray: readArray, 
    readBoolean: readBoolean, 
    readNumber: readNumber, 
    readString: readString, 
    showForeignError: showForeignError, 
    tagOf: tagOf, 
    toForeign: toForeign, 
    typeOf: typeOf, 
    unsafeFromForeign: unsafeFromForeign
};

},{"Data.Either":13,"Data.Function":17,"Prelude":30}],17:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function mkFn0(fn) {  return function() {    return fn({});  };};
function mkFn1(fn) {  return function(a) {    return fn(a);  };};
function mkFn2(fn) {  return function(a, b) {    return fn(a)(b);  };};
function mkFn3(fn) {  return function(a, b, c) {    return fn(a)(b)(c);  };};
function mkFn4(fn) {  return function(a, b, c, d) {    return fn(a)(b)(c)(d);  };};
function mkFn5(fn) {  return function(a, b, c, d, e) {    return fn(a)(b)(c)(d)(e);  };};
function mkFn6(fn) {  return function(a, b, c, d, e, f) {    return fn(a)(b)(c)(d)(e)(f);  };};
function mkFn7(fn) {  return function(a, b, c, d, e, f, g) {    return fn(a)(b)(c)(d)(e)(f)(g);  };};
function mkFn8(fn) {  return function(a, b, c, d, e, f, g, h) {    return fn(a)(b)(c)(d)(e)(f)(g)(h);  };};
function mkFn9(fn) {  return function(a, b, c, d, e, f, g, h, i) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);  };};
function mkFn10(fn) {  return function(a, b, c, d, e, f, g, h, i, j) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);  };};
function runFn0(fn) {  return fn();};
function runFn1(fn) {  return function(a) {    return fn(a);  };};
function runFn2(fn) {  return function(a) {    return function(b) {      return fn(a, b);    };  };};
function runFn3(fn) {  return function(a) {    return function(b) {      return function(c) {        return fn(a, b, c);      };    };  };};
function runFn4(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return fn(a, b, c, d);        };      };    };  };};
function runFn5(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return fn(a, b, c, d, e);          };        };      };    };  };};
function runFn6(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return fn(a, b, c, d, e, f);            };          };        };      };    };  };};
function runFn7(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return fn(a, b, c, d, e, f, g);              };            };          };        };      };    };  };};
function runFn8(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return fn(a, b, c, d, e, f, g, h);                };              };            };          };        };      };    };  };};
function runFn9(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return fn(a, b, c, d, e, f, g, h, i);                  };                };              };            };          };        };      };    };  };};
function runFn10(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return function(j) {                      return fn(a, b, c, d, e, f, g, h, i, j);                    };                  };                };              };            };          };        };      };    };  };};
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
module.exports = {
    mkFn0: mkFn0, 
    mkFn1: mkFn1, 
    mkFn10: mkFn10, 
    mkFn2: mkFn2, 
    mkFn3: mkFn3, 
    mkFn4: mkFn4, 
    mkFn5: mkFn5, 
    mkFn6: mkFn6, 
    mkFn7: mkFn7, 
    mkFn8: mkFn8, 
    mkFn9: mkFn9, 
    on: on, 
    runFn0: runFn0, 
    runFn1: runFn1, 
    runFn10: runFn10, 
    runFn2: runFn2, 
    runFn3: runFn3, 
    runFn4: runFn4, 
    runFn5: runFn5, 
    runFn6: runFn6, 
    runFn7: runFn7, 
    runFn8: runFn8, 
    runFn9: runFn9
};

},{"Prelude":30}],18:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
function Nothing() {

};
Nothing.value = new Nothing();
function Just(value0) {
    this.value0 = value0;
};
Just.create = function (value0) {
    return new Just(value0);
};
var showMaybe = function (__dict_Show_0) {
    return new Prelude.Show(function (_114) {
        if (_114 instanceof Just) {
            return "Just (" + (Prelude.show(__dict_Show_0)(_114.value0) + ")");
        };
        if (_114 instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupMaybe = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_112) {
        return function (_113) {
            if (_112 instanceof Nothing) {
                return _113;
            };
            if (_113 instanceof Nothing) {
                return _112;
            };
            if (_112 instanceof Just && _113 instanceof Just) {
                return new Just(Prelude["<>"](__dict_Semigroup_1)(_112.value0)(_113.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
};
var maybe = function (_99) {
    return function (_100) {
        return function (_101) {
            if (_101 instanceof Nothing) {
                return _99;
            };
            if (_101 instanceof Just) {
                return _100(_101.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isNothing = maybe(true)(Prelude["const"](false));
var isJust = maybe(false)(Prelude["const"](true));
var functorMaybe = new Prelude.Functor(function (_102) {
    return function (_103) {
        if (_103 instanceof Just) {
            return new Just(_102(_103.value0));
        };
        return Nothing.value;
    };
});
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryArr));
};
var extendMaybe = new Control_Extend.Extend(function (_110) {
    return function (_111) {
        if (_111 instanceof Nothing) {
            return Nothing.value;
        };
        return Just.create(_110(_111));
    };
}, function () {
    return functorMaybe;
});
var eqMaybe = function (__dict_Eq_3) {
    return new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqMaybe(__dict_Eq_3))(a)(b);
        };
    }, function (_115) {
        return function (_116) {
            if (_115 instanceof Nothing && _116 instanceof Nothing) {
                return true;
            };
            if (_115 instanceof Just && _116 instanceof Just) {
                return Prelude["=="](__dict_Eq_3)(_115.value0)(_116.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMaybe(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_117) {
        return function (_118) {
            if (_117 instanceof Just && _118 instanceof Just) {
                return Prelude.compare(__dict_Ord_2)(_117.value0)(_118.value0);
            };
            if (_117 instanceof Nothing && _118 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (_117 instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (_118 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var applyMaybe = new Prelude.Apply(function (_104) {
    return function (_105) {
        if (_104 instanceof Just) {
            return Prelude["<$>"](functorMaybe)(_104.value0)(_105);
        };
        if (_104 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorMaybe;
});
var bindMaybe = new Prelude.Bind(function (_108) {
    return function (_109) {
        if (_108 instanceof Just) {
            return _109(_108.value0);
        };
        if (_108 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyMaybe;
});
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function (_106) {
    return function (_107) {
        if (_106 instanceof Nothing) {
            return _107;
        };
        return _106;
    };
}, function () {
    return functorMaybe;
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Just: Just, 
    Nothing: Nothing, 
    altMaybe: altMaybe, 
    alternativeMaybe: alternativeMaybe, 
    applicativeMaybe: applicativeMaybe, 
    applyMaybe: applyMaybe, 
    bindMaybe: bindMaybe, 
    eqMaybe: eqMaybe, 
    extendMaybe: extendMaybe, 
    fromMaybe: fromMaybe, 
    functorMaybe: functorMaybe, 
    isJust: isJust, 
    isNothing: isNothing, 
    maybe: maybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    ordMaybe: ordMaybe, 
    plusMaybe: plusMaybe, 
    semigroupMaybe: semigroupMaybe, 
    showMaybe: showMaybe
};

},{"Control.Alt":1,"Control.Alternative":2,"Control.Extend":5,"Control.MonadPlus":10,"Control.Plus":11,"Prelude":30}],19:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var First = {
    create: function (value) {
        return value;
    }
};
var showFirst = function (__dict_Show_0) {
    return new Prelude.Show(function (_295) {
        return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_0))(_295) + ")");
    });
};
var semigroupFirst = new Prelude.Semigroup(function (_296) {
    return function (_297) {
        if (_296 instanceof Data_Maybe.Just) {
            return _296;
        };
        return _297;
    };
});
var runFirst = function (_288) {
    return _288;
};
var monoidFirst = new Data_Monoid.Monoid(function () {
    return semigroupFirst;
}, Data_Maybe.Nothing.value);
var eqFirst = function (__dict_Eq_2) {
    return new Prelude.Eq(function (_291) {
        return function (_292) {
            return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_2))(_291)(_292);
        };
    }, function (_289) {
        return function (_290) {
            return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_2))(_289)(_290);
        };
    });
};
var ordFirst = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqFirst(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (_293) {
        return function (_294) {
            return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_1))(_293)(_294);
        };
    });
};
module.exports = {
    First: First, 
    eqFirst: eqFirst, 
    monoidFirst: monoidFirst, 
    ordFirst: ordFirst, 
    runFirst: runFirst, 
    semigroupFirst: semigroupFirst, 
    showFirst: showFirst
};

},{"Data.Maybe":18,"Data.Monoid":20,"Prelude":30}],20:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Data_Array = require("Data.Array");
function Monoid(__superclass_Prelude$dotSemigroup_0, mempty) {
    this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Prelude.semigroupUnit;
}, Prelude.unit);
var monoidString = new Monoid(function () {
    return Prelude.semigroupString;
}, "");
var monoidMaybe = function (__dict_Semigroup_0) {
    return new Monoid(function () {
        return Data_Maybe.semigroupMaybe(__dict_Semigroup_0);
    }, Data_Maybe.Nothing.value);
};
var monoidArray = new Monoid(function () {
    return Data_Array.semigroupArray;
}, [  ]);
var mempty = function (dict) {
    return dict.mempty;
};
var monoidArr = function (__dict_Monoid_1) {
    return new Monoid(function () {
        return Prelude.semigroupArr(__dict_Monoid_1["__superclass_Prelude.Semigroup_0"]());
    }, Prelude["const"](mempty(__dict_Monoid_1)));
};
module.exports = {
    Monoid: Monoid, 
    mempty: mempty, 
    monoidArr: monoidArr, 
    monoidArray: monoidArray, 
    monoidMaybe: monoidMaybe, 
    monoidString: monoidString, 
    monoidUnit: monoidUnit
};

},{"Data.Array":12,"Data.Maybe":18,"Prelude":30}],21:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");

  function _new() {
    return {};
  }
  ;

  function peek(m) {
    return function(k) {
      return function() {
        return m[k];
      }
    }
  }
  ;

  function poke(m) {
    return function(k) {
      return function(v) {
        return function() {
          m[k] = v;
          return m;
        };
      };
    };
  }
  ;

  function _delete(m) {
    return function(k) {
      return function() {
        delete m[k];
        return m;
      };
    };
  }
  ;
var $$new = _new;
var $$delete = _delete;
module.exports = {
    "delete": $$delete, 
    "new": $$new, 
    peek: peek, 
    poke: poke
};

},{"Prelude":30}],22:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Control_Monad_Eff = require("Control.Monad.Eff");
var Prelude = require("Prelude");
var Data_Function = require("Data.Function");
var Data_Monoid = require("Data.Monoid");
var Data_Foldable = require("Data.Foldable");
var Data_Tuple = require("Data.Tuple");
var Data_Traversable = require("Data.Traversable");
var Data_Maybe = require("Data.Maybe");
var Data_StrMap_ST = require("Data.StrMap.ST");
var Data_Array = require("Data.Array");

  function _copy(m) {
    var r = {};
    for (var k in m) {
      r[k] = m[k];
    }
    return r;
  }
  ;

  function _copyEff(m) {
    return function() {
      var r = {};
      for (var k in m) {
        r[k] = m[k];
      }
      return r;
    };
  }
  ;

  function runST(f) {
    return f;
  }
  ;

  function _fmapStrMap(m0, f) {
    var m = {};
    for (var k in m0) {
      m[k] = f(m0[k]);
    }
    return m;
  }
  ;

  function _foldM(bind) {
    return function(f) {
      return function(mz) {
        return function(m) {
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            mz = bind(mz)(g(k));
          }
          return mz;
        };
      };
    };
  }
  ;

  function _foldSCStrMap(m, z, f, fromMaybe) {
    for (var k in m) {
      var maybeR = f(z)(k)(m[k]);
      var r = fromMaybe(null)(maybeR);
      if (r === null) return z;
      else z = r;
    }
    return z;
  }
  ;

  function all(f) {
    return function(m) {
      for (var k in m) {
        if (!f(k)(m[k])) return false;
      }
      return true;
    };
  }
  ;
var empty = {};;

  function size(m) {
    var s = 0;
    for (var k in m) {
      ++s;
    }
    return s;
  }
  ;

  function _lookup(no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  }
  ;

  function _unsafeDeleteStrMap(m, k) {
     delete m[k];
     return m;
  }
  ;

  function _collect(f) {
    return function(m) {
      var r = [];
      for (var k in m) {
        r.push(f(k)(m[k]));
      }
      return r;
    };
  }
  ;

  var keys = Object.keys || _collect(function(k) {
    return function() { return k; };
  });
  ;
var values = _collect(function (_) {
    return function (v) {
        return v;
    };
});
var toList = _collect(Data_Tuple.Tuple.create);
var thawST = _copyEff;
var showStrMap = function (__dict_Show_0) {
    return new Prelude.Show(function (m) {
        return "fromList " + Prelude.show(Prelude.showArray(Data_Tuple.showTuple(Prelude.showString)(__dict_Show_0)))(toList(m));
    });
};
var pureST = function (f) {
    return Control_Monad_Eff.runPure(runST(f));
};
var singleton = function (k) {
    return function (v) {
        return pureST(function __do() {
            var _26 = Data_StrMap_ST["new"]();
            Data_StrMap_ST.poke(_26)(k)(v)();
            return _26;
        });
    };
};
var mutate = function (f) {
    return function (m) {
        return pureST(function __do() {
            var _25 = thawST(m)();
            f(_25)();
            return _25;
        });
    };
};
var member = Data_Function.runFn4(_lookup)(false)(Prelude["const"](true));
var lookup = Data_Function.runFn4(_lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var isSubmap = function (__dict_Eq_1) {
    return function (m1) {
        return function (m2) {
            var f = function (k) {
                return function (v) {
                    return _lookup(false, Prelude["=="](__dict_Eq_1)(v), k, m2);
                };
            };
            return all(f)(m1);
        };
    };
};
var isEmpty = all(function (_) {
    return function (__1) {
        return false;
    };
});
var insert = function (k) {
    return function (v) {
        return mutate(function (s) {
            return Data_StrMap_ST.poke(s)(k)(v);
        });
    };
};
var functorStrMap = new Prelude.Functor(function (f) {
    return function (m) {
        return _fmapStrMap(m, f);
    };
});
var map = Prelude["<$>"](functorStrMap);
var fromList = function (l) {
    return pureST(function __do() {
        var _27 = Data_StrMap_ST["new"]();
        Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(l)(function (_418) {
            return Data_StrMap_ST.poke(_27)(_418.value0)(_418.value1);
        })();
        return _27;
    });
};
var freezeST = _copyEff;
var foldMaybe = function (f) {
    return function (z) {
        return function (m) {
            return _foldSCStrMap(m, z, f, Data_Maybe.fromMaybe);
        };
    };
};
var foldM = function (__dict_Monad_2) {
    return function (f) {
        return function (z) {
            return _foldM(Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]()))(f)(Prelude.pure(__dict_Monad_2["__superclass_Prelude.Applicative_0"]())(z));
        };
    };
};
var semigroupStrMap = function (__dict_Semigroup_3) {
    return new Prelude.Semigroup(function (m1) {
        return function (m2) {
            return mutate(function (s) {
                return foldM(Control_Monad_Eff.monadEff)(function (s_1) {
                    return function (k) {
                        return function (v2) {
                            return Data_StrMap_ST.poke(s_1)(k)(_lookup(v2, function (v1) {
                                return Prelude["<>"](__dict_Semigroup_3)(v1)(v2);
                            }, k, m2));
                        };
                    };
                })(s)(m1);
            })(m2);
        };
    });
};
var union = function (m) {
    return mutate(function (s) {
        return foldM(Control_Monad_Eff.monadEff)(Data_StrMap_ST.poke)(s)(m);
    });
};
var unions = Data_Foldable.foldl(Data_Foldable.foldableArray)(union)(empty);
var fold = _foldM(Prelude["#"]);
var foldMap = function (__dict_Monoid_6) {
    return function (f) {
        return fold(function (acc) {
            return function (k) {
                return function (v) {
                    return Prelude["<>"](__dict_Monoid_6["__superclass_Prelude.Semigroup_0"]())(acc)(f(k)(v));
                };
            };
        })(Data_Monoid.mempty(__dict_Monoid_6));
    };
};
var foldableStrMap = new Data_Foldable.Foldable(function (__dict_Monoid_7) {
    return function (f) {
        return foldMap(__dict_Monoid_7)(Prelude["const"](f));
    };
}, function (f) {
    return fold(function (z) {
        return function (_) {
            return f(z);
        };
    });
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
        };
    };
});
var traversableStrMap = new Data_Traversable.Traversable(function () {
    return foldableStrMap;
}, function () {
    return functorStrMap;
}, function (__dict_Applicative_5) {
    return Data_Traversable.traverse(traversableStrMap)(__dict_Applicative_5)(Prelude.id(Prelude.categoryArr));
}, function (__dict_Applicative_4) {
    return function (f) {
        return function (ms) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
                return function (acc) {
                    return Prelude["<*>"](__dict_Applicative_4["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_4["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(union)(x))(acc);
                };
            })(Prelude.pure(__dict_Applicative_4)(empty))(Prelude["<$>"](Data_Array.functorArray)(Prelude["<$>"]((__dict_Applicative_4["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.uncurry(singleton)))(Prelude["<$>"](Data_Array.functorArray)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(__dict_Applicative_4)(f))(toList(ms))));
        };
    };
});
var eqStrMap = function (__dict_Eq_8) {
    return new Prelude.Eq(function (m1) {
        return function (m2) {
            return !Prelude["=="](eqStrMap(__dict_Eq_8))(m1)(m2);
        };
    }, function (m1) {
        return function (m2) {
            return isSubmap(__dict_Eq_8)(m1)(m2) && isSubmap(__dict_Eq_8)(m2)(m1);
        };
    });
};
var $$delete = function (k) {
    return mutate(function (s) {
        return Data_StrMap_ST["delete"](s)(k);
    });
};
var alter = function (f) {
    return function (k) {
        return function (m) {
            var _1732 = f(lookup(k)(m));
            if (_1732 instanceof Data_Maybe.Nothing) {
                return $$delete(k)(m);
            };
            if (_1732 instanceof Data_Maybe.Just) {
                return insert(k)(_1732.value0)(m);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var update = function (f) {
    return function (k) {
        return function (m) {
            return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
        };
    };
};
module.exports = {
    all: all, 
    alter: alter, 
    "delete": $$delete, 
    empty: empty, 
    eqStrMap: eqStrMap, 
    fold: fold, 
    foldM: foldM, 
    foldMap: foldMap, 
    foldMaybe: foldMaybe, 
    foldableStrMap: foldableStrMap, 
    freezeST: freezeST, 
    fromList: fromList, 
    functorStrMap: functorStrMap, 
    insert: insert, 
    isEmpty: isEmpty, 
    isSubmap: isSubmap, 
    keys: keys, 
    lookup: lookup, 
    map: map, 
    member: member, 
    runST: runST, 
    semigroupStrMap: semigroupStrMap, 
    showStrMap: showStrMap, 
    singleton: singleton, 
    size: size, 
    thawST: thawST, 
    toList: toList, 
    traversableStrMap: traversableStrMap, 
    union: union, 
    unions: unions, 
    update: update, 
    values: values
};

},{"Control.Monad.Eff":8,"Data.Array":12,"Data.Foldable":15,"Data.Function":17,"Data.Maybe":18,"Data.Monoid":20,"Data.StrMap.ST":21,"Data.Traversable":23,"Data.Tuple":24,"Prelude":30}],23:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Array = require("Data.Array");
var Data_Tuple = require("Data.Tuple");
var Data_Foldable = require("Data.Foldable");
var Data_Eq = require("Data.Eq");
var Data_Maybe = require("Data.Maybe");
var Data_Either = require("Data.Either");
var StateR = {
    create: function (value) {
        return value;
    }
};
var StateL = {
    create: function (value) {
        return value;
    }
};
function Traversable(__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
    this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    this.sequence = sequence;
    this.traverse = traverse;
};
var traverse = function (dict) {
    return dict.traverse;
};
var traversableTuple = new Traversable(function () {
    return Data_Foldable.foldableTuple;
}, function () {
    return Data_Tuple.functorTuple;
}, function (__dict_Applicative_1) {
    return function (_360) {
        return Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_360.value0))(_360.value1);
    };
}, function (__dict_Applicative_0) {
    return function (_358) {
        return function (_359) {
            return Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_359.value0))(_358(_359.value1));
        };
    };
});
var traversableRef = new Traversable(function () {
    return Data_Foldable.foldableRef;
}, function () {
    return Data_Eq.functorRef;
}, function (__dict_Applicative_3) {
    return function (_354) {
        return Prelude["<$>"]((__dict_Applicative_3["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Eq.Ref.create)(_354);
    };
}, function (__dict_Applicative_2) {
    return function (_352) {
        return function (_353) {
            return Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Eq.Ref.create)(_352(_353));
        };
    };
});
var traversableMaybe = new Traversable(function () {
    return Data_Foldable.foldableMaybe;
}, function () {
    return Data_Maybe.functorMaybe;
}, function (__dict_Applicative_5) {
    return function (_357) {
        if (_357 instanceof Data_Maybe.Nothing) {
            return Prelude.pure(__dict_Applicative_5)(Data_Maybe.Nothing.value);
        };
        if (_357 instanceof Data_Maybe.Just) {
            return Prelude["<$>"]((__dict_Applicative_5["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_357.value0);
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_4) {
    return function (_355) {
        return function (_356) {
            if (_356 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(__dict_Applicative_4)(Data_Maybe.Nothing.value);
            };
            if (_356 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((__dict_Applicative_4["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_355(_356.value0));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var traversableEither = new Traversable(function () {
    return Data_Foldable.foldableEither;
}, function () {
    return Data_Either.functorEither;
}, function (__dict_Applicative_7) {
    return function (_351) {
        if (_351 instanceof Data_Either.Left) {
            return Prelude.pure(__dict_Applicative_7)(new Data_Either.Left(_351.value0));
        };
        if (_351 instanceof Data_Either.Right) {
            return Prelude["<$>"]((__dict_Applicative_7["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_351.value0);
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_6) {
    return function (_349) {
        return function (_350) {
            if (_350 instanceof Data_Either.Left) {
                return Prelude.pure(__dict_Applicative_6)(new Data_Either.Left(_350.value0));
            };
            if (_350 instanceof Data_Either.Right) {
                return Prelude["<$>"]((__dict_Applicative_6["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_349(_350.value0));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var stateR = function (_345) {
    return _345;
};
var stateL = function (_344) {
    return _344;
};
var sequence = function (dict) {
    return dict.sequence;
};
var traversableArray = new Traversable(function () {
    return Data_Foldable.foldableArray;
}, function () {
    return Data_Array.functorArray;
}, function (__dict_Applicative_9) {
    return function (_348) {
        if (_348.length === 0) {
            return Prelude.pure(__dict_Applicative_9)([  ]);
        };
        if (_348.length >= 1) {
            var _1103 = _348.slice(1);
            return Prelude["<*>"](__dict_Applicative_9["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_9["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_348[0]))(sequence(traversableArray)(__dict_Applicative_9)(_1103));
        };
        throw new Error("Failed pattern match");
    };
}, function (__dict_Applicative_8) {
    return function (_346) {
        return function (_347) {
            if (_347.length === 0) {
                return Prelude.pure(__dict_Applicative_8)([  ]);
            };
            if (_347.length >= 1) {
                var _1107 = _347.slice(1);
                return Prelude["<*>"](__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_8["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_346(_347[0])))(traverse(traversableArray)(__dict_Applicative_8)(_346)(_1107));
            };
            throw new Error("Failed pattern match");
        };
    };
});
var zipWithA = function (__dict_Applicative_10) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return sequence(traversableArray)(__dict_Applicative_10)(Data_Array.zipWith(f)(xs)(ys));
            };
        };
    };
};
var functorStateR = new Prelude.Functor(function (f) {
    return function (k) {
        return StateR.create(function (s) {
            var _1108 = stateR(k)(s);
            return new Data_Tuple.Tuple(_1108.value0, f(_1108.value1));
        });
    };
});
var functorStateL = new Prelude.Functor(function (f) {
    return function (k) {
        return StateL.create(function (s) {
            var _1111 = stateL(k)(s);
            return new Data_Tuple.Tuple(_1111.value0, f(_1111.value1));
        });
    };
});
var $$for = function (__dict_Applicative_13) {
    return function (__dict_Traversable_14) {
        return function (x) {
            return function (f) {
                return traverse(__dict_Traversable_14)(__dict_Applicative_13)(f)(x);
            };
        };
    };
};
var applyStateR = new Prelude.Apply(function (f) {
    return function (x) {
        return StateR.create(function (s) {
            var _1114 = stateR(x)(s);
            var _1115 = stateR(f)(_1114.value0);
            return new Data_Tuple.Tuple(_1115.value0, _1115.value1(_1114.value1));
        });
    };
}, function () {
    return functorStateR;
});
var applyStateL = new Prelude.Apply(function (f) {
    return function (x) {
        return StateL.create(function (s) {
            var _1120 = stateL(f)(s);
            var _1121 = stateL(x)(_1120.value0);
            return new Data_Tuple.Tuple(_1121.value0, _1120.value1(_1121.value1));
        });
    };
}, function () {
    return functorStateL;
});
var applicativeStateR = new Prelude.Applicative(function () {
    return applyStateR;
}, function (a) {
    return StateR.create(function (s) {
        return new Data_Tuple.Tuple(s, a);
    });
});
var mapAccumR = function (__dict_Traversable_11) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateR(traverse(__dict_Traversable_11)(applicativeStateR)(function (a) {
                    return StateR.create(function (s) {
                        return f(s)(a);
                    });
                })(xs))(s0);
            };
        };
    };
};
var applicativeStateL = new Prelude.Applicative(function () {
    return applyStateL;
}, function (a) {
    return StateL.create(function (s) {
        return new Data_Tuple.Tuple(s, a);
    });
});
var mapAccumL = function (__dict_Traversable_12) {
    return function (f) {
        return function (s0) {
            return function (xs) {
                return stateL(traverse(__dict_Traversable_12)(applicativeStateL)(function (a) {
                    return StateL.create(function (s) {
                        return f(s)(a);
                    });
                })(xs))(s0);
            };
        };
    };
};
module.exports = {
    Traversable: Traversable, 
    "for": $$for, 
    mapAccumL: mapAccumL, 
    mapAccumR: mapAccumR, 
    sequence: sequence, 
    traversableArray: traversableArray, 
    traversableEither: traversableEither, 
    traversableMaybe: traversableMaybe, 
    traversableRef: traversableRef, 
    traversableTuple: traversableTuple, 
    traverse: traverse, 
    zipWithA: zipWithA
};

},{"Data.Array":12,"Data.Either":13,"Data.Eq":14,"Data.Foldable":15,"Data.Maybe":18,"Data.Tuple":24,"Prelude":30}],24:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Lazy = require("Control.Lazy");
var Data_Array = require("Data.Array");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
function Tuple(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
Tuple.create = function (value0) {
    return function (value1) {
        return new Tuple(value0, value1);
    };
};
var zip = Data_Array.zipWith(Tuple.create);
var unzip = function (_216) {
    if (_216.length >= 1) {
        var _696 = _216.slice(1);
        var _690 = unzip(_696);
        return new Tuple(Prelude[":"]((_216[0]).value0)(_690.value0), Prelude[":"]((_216[0]).value1)(_690.value1));
    };
    if (_216.length === 0) {
        return new Tuple([  ], [  ]);
    };
    throw new Error("Failed pattern match");
};
var uncurry = function (_214) {
    return function (_215) {
        return _214(_215.value0)(_215.value1);
    };
};
var swap = function (_217) {
    return new Tuple(_217.value1, _217.value0);
};
var snd = function (_213) {
    return _213.value1;
};
var showTuple = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_218) {
            return "Tuple (" + (Prelude.show(__dict_Show_0)(_218.value0) + (") (" + (Prelude.show(__dict_Show_1)(_218.value1) + ")")));
        });
    };
};
var semigroupoidTuple = new Prelude.Semigroupoid(function (_223) {
    return function (_224) {
        return new Tuple(_224.value0, _223.value1);
    };
});
var semigroupTuple = function (__dict_Semigroup_2) {
    return function (__dict_Semigroup_3) {
        return new Prelude.Semigroup(function (_225) {
            return function (_226) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_2)(_225.value0)(_226.value0), Prelude["<>"](__dict_Semigroup_3)(_225.value1)(_226.value1));
            };
        });
    };
};
var monoidTuple = function (__dict_Monoid_6) {
    return function (__dict_Monoid_7) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(__dict_Monoid_6["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]());
        }, new Tuple(Data_Monoid.mempty(__dict_Monoid_6), Data_Monoid.mempty(__dict_Monoid_7)));
    };
};
var functorTuple = new Prelude.Functor(function (_227) {
    return function (_228) {
        return new Tuple(_228.value0, _227(_228.value1));
    };
});
var fst = function (_212) {
    return _212.value0;
};
var lazyLazy1Tuple = function (__dict_Lazy1_9) {
    return function (__dict_Lazy1_10) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer1(__dict_Lazy1_9)(function (_) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer1(__dict_Lazy1_10)(function (_) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyLazy2Tuple = function (__dict_Lazy2_11) {
    return function (__dict_Lazy2_12) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer2(__dict_Lazy2_11)(function (_) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer2(__dict_Lazy2_12)(function (_) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyTuple = function (__dict_Lazy_13) {
    return function (__dict_Lazy_14) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(__dict_Lazy_13)(function (_) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer(__dict_Lazy_14)(function (_) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var extendTuple = new Control_Extend.Extend(function (_233) {
    return function (_234) {
        return new Tuple(_234.value0, _233(_234));
    };
}, function () {
    return functorTuple;
});
var eqTuple = function (__dict_Eq_15) {
    return function (__dict_Eq_16) {
        return new Prelude.Eq(function (t1) {
            return function (t2) {
                return !Prelude["=="](eqTuple(__dict_Eq_15)(__dict_Eq_16))(t1)(t2);
            };
        }, function (_219) {
            return function (_220) {
                return Prelude["=="](__dict_Eq_15)(_219.value0)(_220.value0) && Prelude["=="](__dict_Eq_16)(_219.value1)(_220.value1);
            };
        });
    };
};
var ordTuple = function (__dict_Ord_4) {
    return function (__dict_Ord_5) {
        return new Prelude.Ord(function () {
            return eqTuple(__dict_Ord_4["__superclass_Prelude.Eq_0"]())(__dict_Ord_5["__superclass_Prelude.Eq_0"]());
        }, function (_221) {
            return function (_222) {
                var _741 = Prelude.compare(__dict_Ord_4)(_221.value0)(_222.value0);
                if (_741 instanceof Prelude.EQ) {
                    return Prelude.compare(__dict_Ord_5)(_221.value1)(_222.value1);
                };
                return _741;
            };
        });
    };
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var applyTuple = function (__dict_Semigroup_18) {
    return new Prelude.Apply(function (_229) {
        return function (_230) {
            return new Tuple(Prelude["<>"](__dict_Semigroup_18)(_229.value0)(_230.value0), _229.value1(_230.value1));
        };
    }, function () {
        return functorTuple;
    });
};
var bindTuple = function (__dict_Semigroup_17) {
    return new Prelude.Bind(function (_231) {
        return function (_232) {
            var _754 = _232(_231.value1);
            return new Tuple(Prelude["<>"](__dict_Semigroup_17)(_231.value0)(_754.value0), _754.value1);
        };
    }, function () {
        return applyTuple(__dict_Semigroup_17);
    });
};
var applicativeTuple = function (__dict_Monoid_19) {
    return new Prelude.Applicative(function () {
        return applyTuple(__dict_Monoid_19["__superclass_Prelude.Semigroup_0"]());
    }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_19)));
};
var monadTuple = function (__dict_Monoid_8) {
    return new Prelude.Monad(function () {
        return applicativeTuple(__dict_Monoid_8);
    }, function () {
        return bindTuple(__dict_Monoid_8["__superclass_Prelude.Semigroup_0"]());
    });
};
module.exports = {
    Tuple: Tuple, 
    applicativeTuple: applicativeTuple, 
    applyTuple: applyTuple, 
    bindTuple: bindTuple, 
    comonadTuple: comonadTuple, 
    curry: curry, 
    eqTuple: eqTuple, 
    extendTuple: extendTuple, 
    fst: fst, 
    functorTuple: functorTuple, 
    lazyLazy1Tuple: lazyLazy1Tuple, 
    lazyLazy2Tuple: lazyLazy2Tuple, 
    lazyTuple: lazyTuple, 
    monadTuple: monadTuple, 
    monoidTuple: monoidTuple, 
    ordTuple: ordTuple, 
    semigroupTuple: semigroupTuple, 
    semigroupoidTuple: semigroupoidTuple, 
    showTuple: showTuple, 
    snd: snd, 
    swap: swap, 
    uncurry: uncurry, 
    unzip: unzip, 
    zip: zip
};

},{"Control.Comonad":4,"Control.Extend":5,"Control.Lazy":6,"Data.Array":12,"Data.Monoid":20,"Prelude":30}],25:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff_Ref = require("Control.Monad.Eff.Ref");
var Data_Traversable = require("Data.Traversable");
var Control_Monad_Eff = require("Control.Monad.Eff");
var FRP_Rabbit_Signal = require("FRP.Rabbit.Signal");
var Data_Array = require("Data.Array");
var createEventHandler = function __do() {
    var _38 = Control_Monad_Eff_Ref.newRef([  ])();
    return {
        event: function (callback) {
            return function __do() {
                var _36 = Control_Monad_Eff_Ref.readRef(_38)();
                Control_Monad_Eff_Ref.writeRef(_38)(Prelude[":"](callback)(_36))();
                return Prelude.unit;
            };
        }, 
        handler: function (a) {
            return function __do() {
                var _37 = Control_Monad_Eff_Ref.readRef(_38)();
                Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(Prelude["<$>"](Data_Array.functorArray)(function (cb) {
                    return cb(a);
                })(_37))();
                return Prelude.unit;
            };
        }
    };
};
module.exports = {
    createEventHandler: createEventHandler
};

},{"Control.Monad.Eff":8,"Control.Monad.Eff.Ref":7,"Data.Array":12,"Data.Traversable":23,"FRP.Rabbit.Signal":26,"Prelude":30}],26:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_Monad_Eff_Ref = require("Control.Monad.Eff.Ref");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Signal = {
    create: function (value) {
        return value;
    }
};
var runSignal = function (__dict_Monad_0) {
    return function (_422) {
        return function (_423) {
            return _422(_423);
        };
    };
};
var monadTransSignal = new Control_Monad_Trans.MonadTrans(function (__dict_Monad_2) {
    return function (m) {
        return function (k) {
            return Prelude[">>="](__dict_Monad_2["__superclass_Prelude.Bind_1"]())(m)(k);
        };
    };
});
var merge = function (__dict_Monad_4) {
    return function (a) {
        return function (b) {
            return function (k) {
                return Prelude[">>="](__dict_Monad_4["__superclass_Prelude.Bind_1"]())(runSignal(__dict_Monad_4)(a)(k))(function (_) {
                    return runSignal(__dict_Monad_4)(b)(k);
                });
            };
        };
    };
};
var semigroupSignal = function (__dict_Monad_5) {
    return new Prelude.Semigroup(merge(__dict_Monad_5));
};
var functorSignal = function (__dict_Monad_6) {
    return new Prelude.Functor(function (f) {
        return function (s) {
            return function (k) {
                return runSignal(__dict_Monad_6)(s)(function (a) {
                    return k(f(a));
                });
            };
        };
    });
};
var callCC = function (__dict_Monad_7) {
    return function (f) {
        return function (k) {
            return runSignal(__dict_Monad_7)(f(function (a) {
                return function (_) {
                    return k(a);
                };
            }))(k);
        };
    };
};
var applySignal = function (__dict_Functor_9) {
    return function (__dict_Monad_10) {
        return new Prelude.Apply(function (s) {
            return function (t) {
                return function (k) {
                    return runSignal(__dict_Monad_10)(s)(function (f) {
                        return runSignal(__dict_Monad_10)(t)(function (a) {
                            return k(f(a));
                        });
                    });
                };
            };
        }, function () {
            return functorSignal(__dict_Monad_10);
        });
    };
};
var bindSignal = function (__dict_Monad_8) {
    return new Prelude.Bind(function (m) {
        return function (k) {
            return function (k$prime) {
                return runSignal(__dict_Monad_8)(m)(function (a) {
                    return runSignal(__dict_Monad_8)(k(a))(k$prime);
                });
            };
        };
    }, function () {
        return applySignal(((__dict_Monad_8["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(__dict_Monad_8);
    });
};
var applicativeSignal = function (__dict_Functor_11) {
    return function (__dict_Monad_12) {
        return new Prelude.Applicative(function () {
            return applySignal(__dict_Functor_11)(__dict_Monad_12);
        }, function (a) {
            return function (k) {
                return k(a);
            };
        });
    };
};
var monadSignal = function (__dict_Monad_3) {
    return new Prelude.Monad(function () {
        return applicativeSignal(((__dict_Monad_3["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(__dict_Monad_3);
    }, function () {
        return bindSignal(__dict_Monad_3);
    });
};
var delay = function (x0) {
    return function (s) {
        return Prelude[">>="](bindSignal(Control_Monad_Eff.monadEff))(Control_Monad_Trans.lift(monadTransSignal)(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Ref.newRef(x0)))(function (_30) {
            return Prelude[">>="](bindSignal(Control_Monad_Eff.monadEff))(Control_Monad_Trans.lift(monadTransSignal)(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Ref.readRef(_30)))(function (_29) {
                return Prelude[">>="](bindSignal(Control_Monad_Eff.monadEff))(s)(function (_28) {
                    return Prelude[">>="](bindSignal(Control_Monad_Eff.monadEff))(Control_Monad_Trans.lift(monadTransSignal)(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Ref.writeRef(_30)(_28)))(function () {
                        return Prelude["return"](monadSignal(Control_Monad_Eff.monadEff))(_29);
                    });
                });
            });
        });
    };
};
var stateful = function (f) {
    return function (x0) {
        return function (s) {
            return Prelude[">>="](bindSignal(Control_Monad_Eff.monadEff))(Control_Monad_Trans.lift(monadTransSignal)(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Ref.newRef(x0)))(function (_33) {
                return Prelude[">>="](bindSignal(Control_Monad_Eff.monadEff))(s)(function (_32) {
                    return Prelude[">>="](bindSignal(Control_Monad_Eff.monadEff))(Control_Monad_Trans.lift(monadTransSignal)(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Ref.readRef(_33)))(function (_31) {
                        var r = f(_32)(_31);
                        return Prelude[">>="](bindSignal(Control_Monad_Eff.monadEff))(Control_Monad_Trans.lift(monadTransSignal)(Control_Monad_Eff.monadEff)(Control_Monad_Eff_Ref.writeRef(_33)(r)))(function () {
                            return Prelude["return"](monadSignal(Control_Monad_Eff.monadEff))(r);
                        });
                    });
                });
            });
        };
    };
};
var altSignal = function (__dict_Monad_13) {
    return new Control_Alt.Alt(merge(__dict_Monad_13), function () {
        return functorSignal(__dict_Monad_13);
    });
};
var plusSignal = function (__dict_Monad_1) {
    return new Control_Plus.Plus(function () {
        return altSignal(__dict_Monad_1);
    }, function (k) {
        return Prelude["return"](__dict_Monad_1)(Prelude.unit);
    });
};
module.exports = {
    Signal: Signal, 
    altSignal: altSignal, 
    applicativeSignal: applicativeSignal, 
    applySignal: applySignal, 
    bindSignal: bindSignal, 
    functorSignal: functorSignal, 
    monadSignal: monadSignal, 
    monadTransSignal: monadTransSignal, 
    plusSignal: plusSignal, 
    runSignal: runSignal, 
    semigroupSignal: semigroupSignal, 
    stateful: stateful
};

},{"Control.Alt":1,"Control.Monad.Eff":8,"Control.Monad.Eff.Ref":7,"Control.Monad.Trans":9,"Control.Plus":11,"Prelude":30}],27:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff_Ref = require("Control.Monad.Eff.Ref");
var FRP_Rabbit_Signal = require("FRP.Rabbit.Signal");
var VirtualDOM = require("VirtualDOM");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var runRabbit = function (vtree) {
    return function (initCallback) {
        return function __do() {
            var _35 = Control_Monad_Eff_Ref.newRef(Data_Maybe.Nothing.value)();
            return FRP_Rabbit_Signal.runSignal(Control_Monad_Eff.monadEff)(vtree)(function (newVNode) {
                return function __do() {
                    var _34 = Control_Monad_Eff_Ref.readRef(_35)();
                    return (function () {
                        if (_34 instanceof Data_Maybe.Nothing) {
                            var node = VirtualDOM.createElement(newVNode);
                            return function __do() {
                                initCallback(node)();
                                return Control_Monad_Eff_Ref.writeRef(_35)(Data_Maybe.Just.create(new Data_Tuple.Tuple(node, newVNode)))();
                            };
                        };
                        if (_34 instanceof Data_Maybe.Just) {
                            return function __do() {
                                VirtualDOM.patch(VirtualDOM.diff(_34.value0.value1)(newVNode))(_34.value0.value0)();
                                return Control_Monad_Eff_Ref.writeRef(_35)(Data_Maybe.Just.create(new Data_Tuple.Tuple(_34.value0.value0, newVNode)))();
                            };
                        };
                        throw new Error("Failed pattern match");
                    })()();
                };
            })();
        };
    };
};
module.exports = {
    runRabbit: runRabbit
};

},{"Control.Monad.Eff":8,"Control.Monad.Eff.Ref":7,"Data.Maybe":18,"Data.Tuple":24,"FRP.Rabbit.Signal":26,"Prelude":30,"VirtualDOM":33}],28:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Array = require("Data.Array");
var Data_Tuple = require("Data.Tuple");
var VirtualDOM_VTree = require("VirtualDOM.VTree");
var Prelude = require("Prelude");
var VirtualDOM_VTree_Typed = require("VirtualDOM.VTree.Typed");
var FRP_Rabbit_Handler = require("FRP.Rabbit.Handler");
var FRP_Rabbit_Signal = require("FRP.Rabbit.Signal");
var FRP_Rabbit = require("FRP.Rabbit");
var Data_Maybe = require("Data.Maybe");
var Control_Monad_Eff = require("Control.Monad.Eff");
function appendToBody(node) {  return function() {    document.body.appendChild(node);  };};
var th = function (_1) {
    if (_1 === 1) {
        return "st";
    };
    if (_1 === 2) {
        return "nd";
    };
    if (_1 === 3) {
        return "rd";
    };
    return "th";
};
var gifts = [ "partridge in a pear tree", "turtle doves", "french hens", "calling birds", "golden rings", "geese a-laying", "swans a-swimming", "maids a-milking", "ladies dancing", "lords a-leaping", "pipers piping", "drummers drumming" ];
var model = function (n) {
    return Data_Array.reverse(Data_Array.take(n)(Data_Tuple.zip(Data_Array[".."](1)(12))(gifts)));
};
var el = function (name) {
    return function (kids) {
        return VirtualDOM_VTree.vnode(name)({})(kids);
    };
};
var view = function (nextDay) {
    return function (n) {
        var day = function (_2) {
            return el("li")([ VirtualDOM_VTree.vtext(Prelude.show(Prelude.showNumber)(_2.value0)), VirtualDOM_VTree.vtext(" "), VirtualDOM_VTree.vtext(_2.value1) ]);
        };
        return el("div")([ el("h1")([ VirtualDOM_VTree.vtext("The twelve days of Christmas") ]), el("p")([ VirtualDOM_VTree.vtext("On the "), VirtualDOM_VTree.vtext(Prelude.show(Prelude.showNumber)(n)), VirtualDOM_VTree.vtext(th(n)), VirtualDOM_VTree.vtext(" day of Christmas, my true love gave to me:") ]), el("ul")(Prelude["<$>"](Data_Array.functorArray)(day)(model(n))), VirtualDOM_VTree_Typed.vnode("button")([ VirtualDOM_VTree_Typed.handler("onclick")(nextDay) ])([ VirtualDOM_VTree.vtext("> Next") ])(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value) ]);
    };
};
var main = function __do() {
    var _0 = FRP_Rabbit_Handler.createEventHandler();
    return (function () {
        var day = Prelude["<>"](FRP_Rabbit_Signal.semigroupSignal(Control_Monad_Eff.monadEff))(FRP_Rabbit_Signal.stateful(function (_) {
            return function (day_1) {
                return (day_1 + 1) % 12;
            };
        })(0)(_0.event))(Prelude.pure(FRP_Rabbit_Signal.applicativeSignal(Control_Monad_Eff.functorEff)(Control_Monad_Eff.monadEff))(0));
        return FRP_Rabbit.runRabbit(Prelude["<$>"](FRP_Rabbit_Signal.functorSignal(Control_Monad_Eff.monadEff))(Prelude["<<<"](Prelude.semigroupoidArr)(view(_0.handler))(Prelude["+"](Prelude.numNumber)(1)))(day))(appendToBody);
    })()();
};
module.exports = {
    appendToBody: appendToBody, 
    el: el, 
    gifts: gifts, 
    main: main, 
    model: model, 
    th: th, 
    view: view
};

},{"Control.Monad.Eff":8,"Data.Array":12,"Data.Maybe":18,"Data.Tuple":24,"FRP.Rabbit":27,"FRP.Rabbit.Handler":25,"FRP.Rabbit.Signal":26,"Prelude":30,"VirtualDOM.VTree":32,"VirtualDOM.VTree.Typed":31}],29:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
function unsafeIndex(xs) {  return function(n) {    return xs[n];  };};
module.exports = {
    unsafeIndex: unsafeIndex
};

},{"Prelude":30}],30:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Unit = {
    create: function (value) {
        return value;
    }
};
function LT() {

};
LT.value = new LT();
function GT() {

};
GT.value = new GT();
function EQ() {

};
EQ.value = new EQ();
function Semigroupoid($less$less$less) {
    this["<<<"] = $less$less$less;
};
function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
    this.id = id;
};
function Show(show) {
    this.show = show;
};
function Functor($less$dollar$greater) {
    this["<$>"] = $less$dollar$greater;
};
function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
    this["<*>"] = $less$times$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
function Applicative(__superclass_Prelude$dotApply_0, pure) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.pure = pure;
};
function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
    this[">>="] = $greater$greater$eq;
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
};
function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
};
function Num($percent, $times, $plus, $minus, $div, negate) {
    this["%"] = $percent;
    this["*"] = $times;
    this["+"] = $plus;
    this["-"] = $minus;
    this["/"] = $div;
    this.negate = negate;
};
function Eq($div$eq, $eq$eq) {
    this["/="] = $div$eq;
    this["=="] = $eq$eq;
};
function Ord(__superclass_Prelude$dotEq_0, compare) {
    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
    this.compare = compare;
};
function Bits($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
    this[".&."] = $dot$amp$dot;
    this[".^."] = $dot$up$dot;
    this[".|."] = $dot$bar$dot;
    this.complement = complement;
    this.shl = shl;
    this.shr = shr;
    this.zshr = zshr;
};
function BoolLike($amp$amp, not, $bar$bar) {
    this["&&"] = $amp$amp;
    this.not = not;
    this["||"] = $bar$bar;
};
function Semigroup($less$greater) {
    this["<>"] = $less$greater;
};
function cons(e) {  return function(l) {    return [e].concat(l);  };};
function showStringImpl(s) {  return JSON.stringify(s);};
function showNumberImpl(n) {  return n.toString();};
function showArrayImpl(f) {  return function(xs) {    var ss = [];    for (var i = 0, l = xs.length; i < l; i++) {      ss[i] = f(xs[i]);    }    return '[' + ss.join(',') + ']';  };};
function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
function numNegate(n) {  return -n;};
function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
function numShl(n1) {  return function(n2) {    return n1 << n2;  };};
function numShr(n1) {  return function(n2) {    return n1 >> n2;  };};
function numZshr(n1) {  return function(n2) {    return n1 >>> n2;  };};
function numAnd(n1) {  return function(n2) {    return n1 & n2;  };};
function numOr(n1) {  return function(n2) {    return n1 | n2;  };};
function numXor(n1) {  return function(n2) {    return n1 ^ n2;  };};
function numComplement(n) {  return ~n;};
function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
function boolNot(b) {  return !b;};
function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
var $bar$bar = function (dict) {
    return dict["||"];
};
var $greater$greater$eq = function (dict) {
    return dict[">>="];
};
var $eq$eq = function (dict) {
    return dict["=="];
};
var $less$greater = function (dict) {
    return dict["<>"];
};
var $less$less$less = function (dict) {
    return dict["<<<"];
};
var $greater$greater$greater = function (__dict_Semigroupoid_0) {
    return function (f) {
        return function (g) {
            return $less$less$less(__dict_Semigroupoid_0)(g)(f);
        };
    };
};
var $less$times$greater = function (dict) {
    return dict["<*>"];
};
var $less$dollar$greater = function (dict) {
    return dict["<$>"];
};
var $less$hash$greater = function (__dict_Functor_1) {
    return function (fa) {
        return function (f) {
            return $less$dollar$greater(__dict_Functor_1)(f)(fa);
        };
    };
};
var $colon = cons;
var $div$eq = function (dict) {
    return dict["/="];
};
var $div = function (dict) {
    return dict["/"];
};
var $dot$bar$dot = function (dict) {
    return dict[".|."];
};
var $dot$up$dot = function (dict) {
    return dict[".^."];
};
var $dot$amp$dot = function (dict) {
    return dict[".&."];
};
var $minus = function (dict) {
    return dict["-"];
};
var $plus$plus = function (__dict_Semigroup_2) {
    return $less$greater(__dict_Semigroup_2);
};
var $plus = function (dict) {
    return dict["+"];
};
var $times = function (dict) {
    return dict["*"];
};
var $amp$amp = function (dict) {
    return dict["&&"];
};
var $percent = function (dict) {
    return dict["%"];
};
var $dollar = function (f) {
    return function (x) {
        return f(x);
    };
};
var $hash = function (x) {
    return function (f) {
        return f(x);
    };
};
var zshr = function (dict) {
    return dict.zshr;
};
var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
var unit = {};
var shr = function (dict) {
    return dict.shr;
};
var showUnit = new Show(function (_44) {
    return "Unit {}";
});
var showString = new Show(showStringImpl);
var showOrdering = new Show(function (_52) {
    if (_52 instanceof LT) {
        return "LT";
    };
    if (_52 instanceof GT) {
        return "GT";
    };
    if (_52 instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match");
});
var showNumber = new Show(showNumberImpl);
var showBoolean = new Show(function (_45) {
    if (_45) {
        return "true";
    };
    if (!_45) {
        return "false";
    };
    throw new Error("Failed pattern match");
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (__dict_Show_3) {
    return new Show(showArrayImpl(show(__dict_Show_3)));
};
var shl = function (dict) {
    return dict.shl;
};
var semigroupoidArr = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var semigroupUnit = new Semigroup(function (_59) {
    return function (_60) {
        return {};
    };
});
var semigroupString = new Semigroup(concatString);
var semigroupArr = function (__dict_Semigroup_4) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
            };
        };
    });
};
var pure = function (dict) {
    return dict.pure;
};
var $$return = function (__dict_Monad_5) {
    return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
};
var otherwise = true;
var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
var not = function (dict) {
    return dict.not;
};
var negate = function (dict) {
    return dict.negate;
};
var liftM1 = function (__dict_Monad_6) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                return $$return(__dict_Monad_6)(f(_0));
            });
        };
    };
};
var liftA1 = function (__dict_Applicative_7) {
    return function (f) {
        return function (a) {
            return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
        };
    };
};
var id = function (dict) {
    return dict.id;
};
var functorArr = new Functor($less$less$less(semigroupoidArr));
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var eqUnit = new Eq(function (_48) {
    return function (_49) {
        return false;
    };
}, function (_46) {
    return function (_47) {
        return true;
    };
});
var ordUnit = new Ord(function () {
    return eqUnit;
}, function (_53) {
    return function (_54) {
        return EQ.value;
    };
});
var eqString = new Eq(refIneq, refEq);
var ordString = new Ord(function () {
    return eqString;
}, unsafeCompare);
var eqNumber = new Eq(refIneq, refEq);
var ordNumber = new Ord(function () {
    return eqNumber;
}, unsafeCompare);
var eqBoolean = new Eq(refIneq, refEq);
var ordBoolean = new Ord(function () {
    return eqBoolean;
}, function (_55) {
    return function (_56) {
        if (!_55 && !_56) {
            return EQ.value;
        };
        if (!_55 && _56) {
            return LT.value;
        };
        if (_55 && _56) {
            return EQ.value;
        };
        if (_55 && !_56) {
            return GT.value;
        };
        throw new Error("Failed pattern match");
    };
});
var $$const = function (_40) {
    return function (_41) {
        return _40;
    };
};
var $$void = function (__dict_Functor_9) {
    return function (fa) {
        return $less$dollar$greater(__dict_Functor_9)($$const(unit))(fa);
    };
};
var complement = function (dict) {
    return dict.complement;
};
var compare = function (dict) {
    return dict.compare;
};
var $less = function (__dict_Ord_11) {
    return function (a1) {
        return function (a2) {
            var _442 = compare(__dict_Ord_11)(a1)(a2);
            if (_442 instanceof LT) {
                return true;
            };
            return false;
        };
    };
};
var $less$eq = function (__dict_Ord_12) {
    return function (a1) {
        return function (a2) {
            var _443 = compare(__dict_Ord_12)(a1)(a2);
            if (_443 instanceof GT) {
                return false;
            };
            return true;
        };
    };
};
var $greater = function (__dict_Ord_13) {
    return function (a1) {
        return function (a2) {
            var _444 = compare(__dict_Ord_13)(a1)(a2);
            if (_444 instanceof GT) {
                return true;
            };
            return false;
        };
    };
};
var $greater$eq = function (__dict_Ord_14) {
    return function (a1) {
        return function (a2) {
            var _445 = compare(__dict_Ord_14)(a1)(a2);
            if (_445 instanceof LT) {
                return false;
            };
            return true;
        };
    };
};
var categoryArr = new Category(function () {
    return semigroupoidArr;
}, function (x) {
    return x;
});
var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
var eqArray = function (__dict_Eq_8) {
    return new Eq(function (xs) {
        return function (ys) {
            return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_8))(xs)(ys));
        };
    }, function (xs) {
        return function (ys) {
            return eqArrayImpl($eq$eq(__dict_Eq_8))(xs)(ys);
        };
    });
};
var ordArray = function (__dict_Ord_10) {
    return new Ord(function () {
        return eqArray(__dict_Ord_10["__superclass_Prelude.Eq_0"]());
    }, function (_57) {
        return function (_58) {
            if (_57.length === 0 && _58.length === 0) {
                return EQ.value;
            };
            if (_57.length === 0) {
                return LT.value;
            };
            if (_58.length === 0) {
                return GT.value;
            };
            if (_57.length >= 1) {
                var _452 = _57.slice(1);
                if (_58.length >= 1) {
                    var _450 = _58.slice(1);
                    var _448 = compare(__dict_Ord_10)(_57[0])(_58[0]);
                    if (_448 instanceof EQ) {
                        return compare(ordArray(__dict_Ord_10))(_452)(_450);
                    };
                    return _448;
                };
            };
            throw new Error("Failed pattern match");
        };
    });
};
var eqOrdering = new Eq(function (x) {
    return function (y) {
        return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
    };
}, function (_50) {
    return function (_51) {
        if (_50 instanceof LT && _51 instanceof LT) {
            return true;
        };
        if (_50 instanceof GT && _51 instanceof GT) {
            return true;
        };
        if (_50 instanceof EQ && _51 instanceof EQ) {
            return true;
        };
        return false;
    };
});
var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
var asTypeOf = function (_42) {
    return function (_43) {
        return _42;
    };
};
var applyArr = new Apply(function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
}, function () {
    return functorArr;
});
var bindArr = new Bind(function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
}, function () {
    return applyArr;
});
var applicativeArr = new Applicative(function () {
    return applyArr;
}, $$const);
var monadArr = new Monad(function () {
    return applicativeArr;
}, function () {
    return bindArr;
});
var ap = function (__dict_Monad_15) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                    return $$return(__dict_Monad_15)(_2(_1));
                });
            });
        };
    };
};
module.exports = {
    "#": $hash, 
    "$": $dollar, 
    "%": $percent, 
    "&&": $amp$amp, 
    "*": $times, 
    "+": $plus, 
    "++": $plus$plus, 
    "-": $minus, 
    ".&.": $dot$amp$dot, 
    ".^.": $dot$up$dot, 
    ".|.": $dot$bar$dot, 
    "/": $div, 
    "/=": $div$eq, 
    ":": $colon, 
    "<": $less, 
    "<#>": $less$hash$greater, 
    "<$>": $less$dollar$greater, 
    "<*>": $less$times$greater, 
    "<<<": $less$less$less, 
    "<=": $less$eq, 
    "<>": $less$greater, 
    "==": $eq$eq, 
    ">": $greater, 
    ">=": $greater$eq, 
    ">>=": $greater$greater$eq, 
    ">>>": $greater$greater$greater, 
    Applicative: Applicative, 
    Apply: Apply, 
    Bind: Bind, 
    Bits: Bits, 
    BoolLike: BoolLike, 
    Category: Category, 
    EQ: EQ, 
    Eq: Eq, 
    Functor: Functor, 
    GT: GT, 
    LT: LT, 
    Monad: Monad, 
    Num: Num, 
    Ord: Ord, 
    Semigroup: Semigroup, 
    Semigroupoid: Semigroupoid, 
    Show: Show, 
    Unit: Unit, 
    ap: ap, 
    applicativeArr: applicativeArr, 
    applyArr: applyArr, 
    asTypeOf: asTypeOf, 
    bindArr: bindArr, 
    bitsNumber: bitsNumber, 
    boolLikeBoolean: boolLikeBoolean, 
    categoryArr: categoryArr, 
    compare: compare, 
    complement: complement, 
    cons: cons, 
    "const": $$const, 
    eqArray: eqArray, 
    eqBoolean: eqBoolean, 
    eqNumber: eqNumber, 
    eqOrdering: eqOrdering, 
    eqString: eqString, 
    eqUnit: eqUnit, 
    flip: flip, 
    functorArr: functorArr, 
    id: id, 
    liftA1: liftA1, 
    liftM1: liftM1, 
    monadArr: monadArr, 
    negate: negate, 
    not: not, 
    numNumber: numNumber, 
    ordArray: ordArray, 
    ordBoolean: ordBoolean, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordUnit: ordUnit, 
    otherwise: otherwise, 
    pure: pure, 
    refEq: refEq, 
    refIneq: refIneq, 
    "return": $$return, 
    semigroupArr: semigroupArr, 
    semigroupString: semigroupString, 
    semigroupUnit: semigroupUnit, 
    semigroupoidArr: semigroupoidArr, 
    shl: shl, 
    show: show, 
    showArray: showArray, 
    showBoolean: showBoolean, 
    showNumber: showNumber, 
    showOrdering: showOrdering, 
    showString: showString, 
    showUnit: showUnit, 
    shr: shr, 
    unit: unit, 
    "void": $$void, 
    zshr: zshr, 
    "||": $bar$bar
};

},{}],31:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_StrMap = require("Data.StrMap");
var Data_Array = require("Data.Array");
var Data_Function = require("Data.Function");
var Data_Maybe = require("Data.Maybe");
var VirtualDOM_VTree = require("VirtualDOM.VTree");
var Data_Foreign = require("Data.Foreign");
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");
function CssProperty(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
CssProperty.create = function (value0) {
    return function (value1) {
        return new CssProperty(value0, value1);
    };
};
function StringAttribute(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
StringAttribute.create = function (value0) {
    return function (value1) {
        return new StringAttribute(value0, value1);
    };
};
function ToggleAttribute(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
ToggleAttribute.create = function (value0) {
    return function (value1) {
        return new ToggleAttribute(value0, value1);
    };
};
function HandlerAttribute(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
HandlerAttribute.create = function (value0) {
    return function (value1) {
        return new HandlerAttribute(value0, value1);
    };
};

  var vnode$prime = (function() {
    var VNode = require('vtree/vnode');
    return function (name, props, children, key, ns) {
      return new VNode(name, props, children, key, ns);
    };
  }());
  ;
var unsafeNull = null;;

  function handlerWrapper(handler) {
    return function(event) {
      handler(event)();
    };
  }
  ;
var vtext = VirtualDOM_VTree.vtext;
var unsafeCoerce = function (x) {
    return Data_Foreign.unsafeFromForeign(Data_Foreign.toForeign(x));
};
var toggle = ToggleAttribute.create;
var handler = function (name) {
    return function (handler_1) {
        return new HandlerAttribute(name, unsafeCoerce(handler_1));
    };
};
var css = CssProperty.create;
var attrValue = function (_421) {
    if (_421 instanceof StringAttribute) {
        return Data_Foreign.toForeign(_421.value1);
    };
    if (_421 instanceof ToggleAttribute) {
        var cssPropertiesToRecord = function (ps) {
            return unsafeCoerce(Data_StrMap.fromList(Data_Array.map(function (_419) {
                return new Data_Tuple.Tuple(_419.value0, _419.value1);
            })(ps)));
        };
        return Data_Foreign.toForeign(_421.value1);
    };
    if (_421 instanceof HandlerAttribute) {
        return handlerWrapper(_421.value1);
    };
    throw new Error("Failed pattern match");
};
var attrName = function (_420) {
    if (_420 instanceof StringAttribute) {
        return _420.value0;
    };
    if (_420 instanceof ToggleAttribute) {
        return _420.value0;
    };
    if (_420 instanceof HandlerAttribute) {
        return _420.value0;
    };
    throw new Error("Failed pattern match");
};
var vnode = function (tagName) {
    return function (attrs) {
        return function (children) {
            return function (key) {
                return function (ns) {
                    var attrToTuple = function (a) {
                        return new Data_Tuple.Tuple(attrName(a), attrValue(a));
                    };
                    var attrsToRecord = function (attrs_1) {
                        return unsafeCoerce(Data_StrMap.fromList(Data_Array.map(attrToTuple)(attrs_1)));
                    };
                    return vnode$prime(tagName, attrsToRecord(attrs), children, Data_Maybe.fromMaybe(unsafeNull)(key), Data_Maybe.fromMaybe(unsafeNull)(ns));
                };
            };
        };
    };
};
var attr = StringAttribute.create;
module.exports = {
    attr: attr, 
    css: css, 
    handler: handler, 
    toggle: toggle, 
    vnode: vnode, 
    vtext: vtext
};

},{"Data.Array":12,"Data.Foreign":16,"Data.Function":17,"Data.Maybe":18,"Data.StrMap":22,"Data.Tuple":24,"Prelude":30,"VirtualDOM.VTree":32,"vtree/vnode":61}],32:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Function = require("Data.Function");
var Prelude = require("Prelude");
var showVTreeImpl = JSON.stringify;;

  var vnode$prime = (function() {
    var VNode = require('vtree/vnode');
   
    return function (name, props, children) {
      var key = undefined;
      var ns = undefined;

      if(props.namespace) {
        ns = props.namespace;
        props.namespace = undefined;
      }

      if(props.key) {
        key = props.key;
        props.key = undefined;
      }

      return new VNode(name, props, children, key, ns);
    };
  }());
  ;

  var vtext = (function() {
    var VText = require('vtree/vtext');
    return function (text) {
      return new VText(text);
    };
  }());
  ;
var vnode = function (name) {
    return function (props) {
        return function (children) {
            return vnode$prime(name, props, children);
        };
    };
};
var showVTree = new Prelude.Show(showVTreeImpl);
module.exports = {
    showVTree: showVTree, 
    vnode: vnode, 
    vtext: vtext
};

},{"Data.Function":17,"Prelude":30,"vtree/vnode":61,"vtree/vtext":62}],33:[function(require,module,exports){
// Generated by psc-make version 0.6.2
"use strict";
var Data_Function = require("Data.Function");
var Prelude = require("Prelude");
var showPatchObjectImpl = JSON.stringify;;
var createElement = require('virtual-dom/create-element');;
var diff$prime = require('virtual-dom/diff');;
var patch$prime = require('virtual-dom/patch');;

  function mkEff(action) {
    return action;
  }
  ;
var showPatchObject = new Prelude.Show(showPatchObjectImpl);
var patch = function (p) {
    return function (n) {
        return mkEff(function (_) {
           console.log("Applying patch: " + JSON.stringify(p)); 
           return patch$prime(n, p);
        });
    };
};
var diff = Data_Function.runFn2(diff$prime);
module.exports = {
    createElement: createElement, 
    diff: diff, 
    patch: patch, 
    showPatchObject: showPatchObject
};

},{"Data.Function":17,"Prelude":30,"virtual-dom/create-element":35,"virtual-dom/diff":36,"virtual-dom/patch":40}],34:[function(require,module,exports){
onload = function() {
  require('Main').main();
};

},{"Main":28}],35:[function(require,module,exports){
var createElement = require("./vdom/create-element.js")

module.exports = createElement

},{"./vdom/create-element.js":42}],36:[function(require,module,exports){
var diff = require("./vtree/diff.js")

module.exports = diff

},{"./vtree/diff.js":55}],37:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":63}],38:[function(require,module,exports){
"use strict";

module.exports = function isObject(x) {
	return typeof x === "object" && x !== null;
};

},{}],39:[function(require,module,exports){
var nativeIsArray = Array.isArray
var toString = Object.prototype.toString

module.exports = nativeIsArray || isArray

function isArray(obj) {
    return toString.call(obj) === "[object Array]"
}

},{}],40:[function(require,module,exports){
var patch = require("./vdom/patch.js")

module.exports = patch

},{"./vdom/patch.js":45}],41:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("../vnode/is-vhook.js")

module.exports = applyProperties

function applyProperties(node, props, previous) {
    for (var propName in props) {
        var propValue = props[propName]

        if (propValue === undefined) {
            removeProperty(node, props, previous, propName);
        } else if (isHook(propValue)) {
            propValue.hook(node,
                propName,
                previous ? previous[propName] : undefined)
        } else {
            if (isObject(propValue)) {
                patchObject(node, props, previous, propName, propValue);
            } else if (propValue !== undefined) {
                node[propName] = propValue
            }
        }
    }
}

function removeProperty(node, props, previous, propName) {
    if (previous) {
        var previousValue = previous[propName]

        if (!isHook(previousValue)) {
            if (propName === "attributes") {
                for (var attrName in previousValue) {
                    node.removeAttribute(attrName)
                }
            } else if (propName === "style") {
                for (var i in previousValue) {
                    node.style[i] = ""
                }
            } else if (typeof previousValue === "string") {
                node[propName] = ""
            } else {
                node[propName] = null
            }
        } else if (previousValue.unhook) {
            previousValue.unhook(node, propName)
        }
    }
}

function patchObject(node, props, previous, propName, propValue) {
    var previousValue = previous ? previous[propName] : undefined

    // Set attributes
    if (propName === "attributes") {
        for (var attrName in propValue) {
            var attrValue = propValue[attrName]

            if (attrValue === undefined) {
                node.removeAttribute(attrName)
            } else {
                node.setAttribute(attrName, attrValue)
            }
        }

        return
    }

    if(previousValue && isObject(previousValue) &&
        getPrototype(previousValue) !== getPrototype(propValue)) {
        node[propName] = propValue
        return
    }

    if (!isObject(node[propName])) {
        node[propName] = {}
    }

    var replacer = propName === "style" ? "" : undefined

    for (var k in propValue) {
        var value = propValue[k]
        node[propName][k] = (value === undefined) ? replacer : value
    }
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

},{"../vnode/is-vhook.js":49,"is-object":38}],42:[function(require,module,exports){
var document = require("global/document")

var applyProperties = require("./apply-properties")

var isVNode = require("../vnode/is-vnode.js")
var isVText = require("../vnode/is-vtext.js")
var isWidget = require("../vnode/is-widget.js")
var handleThunk = require("../vnode/handle-thunk.js")

module.exports = createElement

function createElement(vnode, opts) {
    var doc = opts ? opts.document || document : document
    var warn = opts ? opts.warn : null

    vnode = handleThunk(vnode).a

    if (isWidget(vnode)) {
        return vnode.init()
    } else if (isVText(vnode)) {
        return doc.createTextNode(vnode.text)
    } else if (!isVNode(vnode)) {
        if (warn) {
            warn("Item is not a valid virtual dom node", vnode)
        }
        return null
    }

    var node = (vnode.namespace === null) ?
        doc.createElement(vnode.tagName) :
        doc.createElementNS(vnode.namespace, vnode.tagName)

    var props = vnode.properties
    applyProperties(node, props)

    var children = vnode.children

    for (var i = 0; i < children.length; i++) {
        var childNode = createElement(children[i], opts)
        if (childNode) {
            node.appendChild(childNode)
        }
    }

    return node
}

},{"../vnode/handle-thunk.js":47,"../vnode/is-vnode.js":50,"../vnode/is-vtext.js":51,"../vnode/is-widget.js":52,"./apply-properties":41,"global/document":37}],43:[function(require,module,exports){
// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
// We don't want to read all of the DOM nodes in the tree so we use
// the in-order tree indexing to eliminate recursion down certain branches.
// We only recurse into a DOM node if we know that it contains a child of
// interest.

var noChild = {}

module.exports = domIndex

function domIndex(rootNode, tree, indices, nodes) {
    if (!indices || indices.length === 0) {
        return {}
    } else {
        indices.sort(ascending)
        return recurse(rootNode, tree, indices, nodes, 0)
    }
}

function recurse(rootNode, tree, indices, nodes, rootIndex) {
    nodes = nodes || {}


    if (rootNode) {
        if (indexInRange(indices, rootIndex, rootIndex)) {
            nodes[rootIndex] = rootNode
        }

        var vChildren = tree.children

        if (vChildren) {

            var childNodes = rootNode.childNodes

            for (var i = 0; i < tree.children.length; i++) {
                rootIndex += 1

                var vChild = vChildren[i] || noChild
                var nextIndex = rootIndex + (vChild.count || 0)

                // skip recursion down the tree if there are no nodes down here
                if (indexInRange(indices, rootIndex, nextIndex)) {
                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
                }

                rootIndex = nextIndex
            }
        }
    }

    return nodes
}

// Binary search for an index in the interval [left, right]
function indexInRange(indices, left, right) {
    if (indices.length === 0) {
        return false
    }

    var minIndex = 0
    var maxIndex = indices.length - 1
    var currentIndex
    var currentItem

    while (minIndex <= maxIndex) {
        currentIndex = ((maxIndex + minIndex) / 2) >> 0
        currentItem = indices[currentIndex]

        if (minIndex === maxIndex) {
            return currentItem >= left && currentItem <= right
        } else if (currentItem < left) {
            minIndex = currentIndex + 1
        } else  if (currentItem > right) {
            maxIndex = currentIndex - 1
        } else {
            return true
        }
    }

    return false;
}

function ascending(a, b) {
    return a > b ? 1 : -1
}

},{}],44:[function(require,module,exports){
var applyProperties = require("./apply-properties")

var isWidget = require("../vnode/is-widget.js")
var VPatch = require("../vnode/vpatch.js")

var render = require("./create-element")
var updateWidget = require("./update-widget")

module.exports = applyPatch

function applyPatch(vpatch, domNode, renderOptions) {
    var type = vpatch.type
    var vNode = vpatch.vNode
    var patch = vpatch.patch

    switch (type) {
        case VPatch.REMOVE:
            return removeNode(domNode, vNode)
        case VPatch.INSERT:
            return insertNode(domNode, patch, renderOptions)
        case VPatch.VTEXT:
            return stringPatch(domNode, vNode, patch, renderOptions)
        case VPatch.WIDGET:
            return widgetPatch(domNode, vNode, patch, renderOptions)
        case VPatch.VNODE:
            return vNodePatch(domNode, vNode, patch, renderOptions)
        case VPatch.ORDER:
            reorderChildren(domNode, patch)
            return domNode
        case VPatch.PROPS:
            applyProperties(domNode, patch, vNode.properties)
            return domNode
        case VPatch.THUNK:
            return replaceRoot(domNode,
                renderOptions.patch(domNode, patch, renderOptions))
        default:
            return domNode
    }
}

function removeNode(domNode, vNode) {
    var parentNode = domNode.parentNode

    if (parentNode) {
        parentNode.removeChild(domNode)
    }

    destroyWidget(domNode, vNode);

    return null
}

function insertNode(parentNode, vNode, renderOptions) {
    var newNode = render(vNode, renderOptions)

    if (parentNode) {
        parentNode.appendChild(newNode)
    }

    return parentNode
}

function stringPatch(domNode, leftVNode, vText, renderOptions) {
    var newNode

    if (domNode.nodeType === 3) {
        domNode.replaceData(0, domNode.length, vText.text)
        newNode = domNode
    } else {
        var parentNode = domNode.parentNode
        newNode = render(vText, renderOptions)

        if (parentNode) {
            parentNode.replaceChild(newNode, domNode)
        }
    }

    return newNode
}

function widgetPatch(domNode, leftVNode, widget, renderOptions) {
    var updating = updateWidget(leftVNode, widget)
    var newNode

    if (updating) {
        newNode = widget.update(leftVNode, domNode) || domNode
    } else {
        newNode = render(widget, renderOptions)
    }

    var parentNode = domNode.parentNode

    if (parentNode && newNode !== domNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    if (!updating) {
        destroyWidget(domNode, leftVNode)
    }

    return newNode
}

function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
    var parentNode = domNode.parentNode
    var newNode = render(vNode, renderOptions)

    if (parentNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    return newNode
}

function destroyWidget(domNode, w) {
    if (typeof w.destroy === "function" && isWidget(w)) {
        w.destroy(domNode)
    }
}

function reorderChildren(domNode, bIndex) {
    var children = []
    var childNodes = domNode.childNodes
    var len = childNodes.length
    var i
    var reverseIndex = bIndex.reverse

    for (i = 0; i < len; i++) {
        children.push(domNode.childNodes[i])
    }

    var insertOffset = 0
    var move
    var node
    var insertNode
    for (i = 0; i < len; i++) {
        move = bIndex[i]
        if (move !== undefined && move !== i) {
            // the element currently at this index will be moved later so increase the insert offset
            if (reverseIndex[i] > i) {
                insertOffset++
            }

            node = children[move]
            insertNode = childNodes[i + insertOffset] || null
            if (node !== insertNode) {
                domNode.insertBefore(node, insertNode)
            }

            // the moved element came from the front of the array so reduce the insert offset
            if (move < i) {
                insertOffset--
            }
        }

        // element at this index is scheduled to be removed so increase insert offset
        if (i in bIndex.removes) {
            insertOffset++
        }
    }
}

function replaceRoot(oldRoot, newRoot) {
    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
        console.log(oldRoot)
        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
    }

    return newRoot;
}

},{"../vnode/is-widget.js":52,"../vnode/vpatch.js":54,"./apply-properties":41,"./create-element":42,"./update-widget":46}],45:[function(require,module,exports){
var document = require("global/document")
var isArray = require("x-is-array")

var domIndex = require("./dom-index")
var patchOp = require("./patch-op")
module.exports = patch

function patch(rootNode, patches) {
    return patchRecursive(rootNode, patches)
}

function patchRecursive(rootNode, patches, renderOptions) {
    var indices = patchIndices(patches)

    if (indices.length === 0) {
        return rootNode
    }

    var index = domIndex(rootNode, patches.a, indices)
    var ownerDocument = rootNode.ownerDocument

    if (!renderOptions) {
        renderOptions = { patch: patchRecursive }
        if (ownerDocument !== document) {
            renderOptions.document = ownerDocument
        }
    }

    for (var i = 0; i < indices.length; i++) {
        var nodeIndex = indices[i]
        rootNode = applyPatch(rootNode,
            index[nodeIndex],
            patches[nodeIndex],
            renderOptions)
    }

    return rootNode
}

function applyPatch(rootNode, domNode, patchList, renderOptions) {
    if (!domNode) {
        return rootNode
    }

    var newNode

    if (isArray(patchList)) {
        for (var i = 0; i < patchList.length; i++) {
            newNode = patchOp(patchList[i], domNode, renderOptions)

            if (domNode === rootNode) {
                rootNode = newNode
            }
        }
    } else {
        newNode = patchOp(patchList, domNode, renderOptions)

        if (domNode === rootNode) {
            rootNode = newNode
        }
    }

    return rootNode
}

function patchIndices(patches) {
    var indices = []

    for (var key in patches) {
        if (key !== "a") {
            indices.push(Number(key))
        }
    }

    return indices
}

},{"./dom-index":43,"./patch-op":44,"global/document":37,"x-is-array":39}],46:[function(require,module,exports){
var isWidget = require("../vnode/is-widget.js")

module.exports = updateWidget

function updateWidget(a, b) {
    if (isWidget(a) && isWidget(b)) {
        if ("name" in a && "name" in b) {
            return a.id === b.id
        } else {
            return a.init === b.init
        }
    }

    return false
}

},{"../vnode/is-widget.js":52}],47:[function(require,module,exports){
var isVNode = require("./is-vnode")
var isVText = require("./is-vtext")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")

module.exports = handleThunk

function handleThunk(a, b) {
    var renderedA = a
    var renderedB = b

    if (isThunk(b)) {
        renderedB = renderThunk(b, a)
    }

    if (isThunk(a)) {
        renderedA = renderThunk(a, null)
    }

    return {
        a: renderedA,
        b: renderedB
    }
}

function renderThunk(thunk, previous) {
    var renderedThunk = thunk.vnode

    if (!renderedThunk) {
        renderedThunk = thunk.vnode = thunk.render(previous)
    }

    if (!(isVNode(renderedThunk) ||
            isVText(renderedThunk) ||
            isWidget(renderedThunk))) {
        throw new Error("thunk did not return a valid node");
    }

    return renderedThunk
}

},{"./is-thunk":48,"./is-vnode":50,"./is-vtext":51,"./is-widget":52}],48:[function(require,module,exports){
module.exports = isThunk

function isThunk(t) {
    return t && t.type === "Thunk"
}

},{}],49:[function(require,module,exports){
module.exports = isHook

function isHook(hook) {
    return hook && typeof hook.hook === "function" &&
        !hook.hasOwnProperty("hook")
}

},{}],50:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualNode

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version
}

},{"./version":53}],51:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualText

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version
}

},{"./version":53}],52:[function(require,module,exports){
module.exports = isWidget

function isWidget(w) {
    return w && w.type === "Widget"
}

},{}],53:[function(require,module,exports){
module.exports = "1"

},{}],54:[function(require,module,exports){
var version = require("./version")

VirtualPatch.NONE = 0
VirtualPatch.VTEXT = 1
VirtualPatch.VNODE = 2
VirtualPatch.WIDGET = 3
VirtualPatch.PROPS = 4
VirtualPatch.ORDER = 5
VirtualPatch.INSERT = 6
VirtualPatch.REMOVE = 7
VirtualPatch.THUNK = 8

module.exports = VirtualPatch

function VirtualPatch(type, vNode, patch) {
    this.type = Number(type)
    this.vNode = vNode
    this.patch = patch
}

VirtualPatch.prototype.version = version
VirtualPatch.prototype.type = "VirtualPatch"

},{"./version":53}],55:[function(require,module,exports){
var isArray = require("x-is-array")
var isObject = require("is-object")

var VPatch = require("../vnode/vpatch")
var isVNode = require("../vnode/is-vnode")
var isVText = require("../vnode/is-vtext")
var isWidget = require("../vnode/is-widget")
var isThunk = require("../vnode/is-thunk")
var isHook = require("../vnode/is-vhook")
var handleThunk = require("../vnode/handle-thunk")

module.exports = diff

function diff(a, b) {
    var patch = { a: a }
    walk(a, b, patch, 0)
    return patch
}

function walk(a, b, patch, index) {
    if (a === b) {
        return
    }

    var apply = patch[index]
    var applyClear = false

    if (isThunk(a) || isThunk(b)) {
        thunks(a, b, patch, index)
    } else if (b == null) {

        // If a is a widget we will add a remove patch for it
        // Otherwise any child widgets/hooks must be destroyed.
        // This prevents adding two remove patches for a widget.
        if (!isWidget(a)) {
            clearState(a, patch, index)
            apply = patch[index]
        }

        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
    } else if (isVNode(b)) {
        if (isVNode(a)) {
            if (a.tagName === b.tagName &&
                a.namespace === b.namespace &&
                a.key === b.key) {
                var propsPatch = diffProps(a.properties, b.properties)
                if (propsPatch) {
                    apply = appendPatch(apply,
                        new VPatch(VPatch.PROPS, a, propsPatch))
                }
                apply = diffChildren(a, b, patch, apply, index)
            } else {
                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
                applyClear = true
            }
        } else {
            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
            applyClear = true
        }
    } else if (isVText(b)) {
        if (!isVText(a)) {
            applyClear = true
        } else if (a.text !== b.text) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
        }
    } else if (isWidget(b)) {
        if (!isWidget(a)) {
            applyClear = true;
        }

        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))
    }

    if (apply) {
        patch[index] = apply
    }

    if (applyClear) {
        clearState(a, patch, index)
    }
}

function diffProps(a, b) {
    var diff

    for (var aKey in a) {
        if (!(aKey in b)) {
            diff = diff || {}
            diff[aKey] = undefined
        }

        var aValue = a[aKey]
        var bValue = b[aKey]

        if (aValue === bValue) {
            continue
        } else if (isObject(aValue) && isObject(bValue)) {
            if (getPrototype(bValue) !== getPrototype(aValue)) {
                diff = diff || {}
                diff[aKey] = bValue
            } else if (isHook(bValue)) {
                 diff = diff || {}
                 diff[aKey] = bValue
            } else {
                var objectDiff = diffProps(aValue, bValue)
                if (objectDiff) {
                    diff = diff || {}
                    diff[aKey] = objectDiff
                }
            }
        } else {
            diff = diff || {}
            diff[aKey] = bValue
        }
    }

    for (var bKey in b) {
        if (!(bKey in a)) {
            diff = diff || {}
            diff[bKey] = b[bKey]
        }
    }

    return diff
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

function diffChildren(a, b, patch, apply, index) {
    var aChildren = a.children
    var bChildren = reorder(aChildren, b.children)

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen

    for (var i = 0; i < len; i++) {
        var leftNode = aChildren[i]
        var rightNode = bChildren[i]
        index += 1

        if (!leftNode) {
            if (rightNode) {
                // Excess nodes in b need to be added
                apply = appendPatch(apply,
                    new VPatch(VPatch.INSERT, null, rightNode))
            }
        } else {
            walk(leftNode, rightNode, patch, index)
        }

        if (isVNode(leftNode) && leftNode.count) {
            index += leftNode.count
        }
    }

    if (bChildren.moves) {
        // Reorder nodes last
        apply = appendPatch(apply, new VPatch(VPatch.ORDER, a, bChildren.moves))
    }

    return apply
}

function clearState(vNode, patch, index) {
    // TODO: Make this a single walk, not two
    unhook(vNode, patch, index)
    destroyWidgets(vNode, patch, index)
}

// Patch records for all destroyed widgets must be added because we need
// a DOM node reference for the destroy function
function destroyWidgets(vNode, patch, index) {
    if (isWidget(vNode)) {
        if (typeof vNode.destroy === "function") {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(VPatch.REMOVE, vNode, null)
            )
        }
    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {
        var children = vNode.children
        var len = children.length
        for (var i = 0; i < len; i++) {
            var child = children[i]
            index += 1

            destroyWidgets(child, patch, index)

            if (isVNode(child) && child.count) {
                index += child.count
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

// Create a sub-patch for thunks
function thunks(a, b, patch, index) {
    var nodes = handleThunk(a, b);
    var thunkPatch = diff(nodes.a, nodes.b)
    if (hasPatches(thunkPatch)) {
        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
    }
}

function hasPatches(patch) {
    for (var index in patch) {
        if (index !== "a") {
            return true;
        }
    }

    return false;
}

// Execute hooks when two nodes are identical
function unhook(vNode, patch, index) {
    if (isVNode(vNode)) {
        if (vNode.hooks) {
            patch[index] = appendPatch(
                patch[index],
                new VPatch(
                    VPatch.PROPS,
                    vNode,
                    undefinedKeys(vNode.hooks)
                )
            )
        }

        if (vNode.descendantHooks || vNode.hasThunks) {
            var children = vNode.children
            var len = children.length
            for (var i = 0; i < len; i++) {
                var child = children[i]
                index += 1

                unhook(child, patch, index)

                if (isVNode(child) && child.count) {
                    index += child.count
                }
            }
        }
    } else if (isThunk(vNode)) {
        thunks(vNode, null, patch, index)
    }
}

function undefinedKeys(obj) {
    var result = {}

    for (var key in obj) {
        result[key] = undefined
    }

    return result
}

// List diff, naive left to right reordering
function reorder(aChildren, bChildren) {

    var bKeys = keyIndex(bChildren)

    if (!bKeys) {
        return bChildren
    }

    var aKeys = keyIndex(aChildren)

    if (!aKeys) {
        return bChildren
    }

    var bMatch = {}, aMatch = {}

    for (var aKey in bKeys) {
        bMatch[bKeys[aKey]] = aKeys[aKey]
    }

    for (var bKey in aKeys) {
        aMatch[aKeys[bKey]] = bKeys[bKey]
    }

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen
    var shuffle = []
    var freeIndex = 0
    var i = 0
    var moveIndex = 0
    var moves = {}
    var removes = moves.removes = {}
    var reverse = moves.reverse = {}
    var hasMoves = false

    while (freeIndex < len) {
        var move = aMatch[i]
        if (move !== undefined) {
            shuffle[i] = bChildren[move]
            if (move !== moveIndex) {
                moves[move] = moveIndex
                reverse[moveIndex] = move
                hasMoves = true
            }
            moveIndex++
        } else if (i in aMatch) {
            shuffle[i] = undefined
            removes[i] = moveIndex++
            hasMoves = true
        } else {
            while (bMatch[freeIndex] !== undefined) {
                freeIndex++
            }

            if (freeIndex < len) {
                var freeChild = bChildren[freeIndex]
                if (freeChild) {
                    shuffle[i] = freeChild
                    if (freeIndex !== moveIndex) {
                        hasMoves = true
                        moves[freeIndex] = moveIndex
                        reverse[moveIndex] = freeIndex
                    }
                    moveIndex++
                }
                freeIndex++
            }
        }
        i++
    }

    if (hasMoves) {
        shuffle.moves = moves
    }

    return shuffle
}

function keyIndex(children) {
    var i, keys

    for (i = 0; i < children.length; i++) {
        var child = children[i]

        if (child.key !== undefined) {
            keys = keys || {}
            keys[child.key] = i
        }
    }

    return keys
}

function appendPatch(apply, patch) {
    if (apply) {
        if (isArray(apply)) {
            apply.push(patch)
        } else {
            apply = [apply, patch]
        }

        return apply
    } else {
        return patch
    }
}

},{"../vnode/handle-thunk":47,"../vnode/is-thunk":48,"../vnode/is-vhook":49,"../vnode/is-vnode":50,"../vnode/is-vtext":51,"../vnode/is-widget":52,"../vnode/vpatch":54,"is-object":38,"x-is-array":39}],56:[function(require,module,exports){
module.exports=require(48)
},{}],57:[function(require,module,exports){
module.exports=require(49)
},{}],58:[function(require,module,exports){
module.exports=require(50)
},{"./version":60}],59:[function(require,module,exports){
module.exports=require(52)
},{}],60:[function(require,module,exports){
module.exports=require(53)
},{}],61:[function(require,module,exports){
var version = require("./version")
var isVNode = require("./is-vnode")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")
var isVHook = require("./is-vhook")

module.exports = VirtualNode

var noProperties = {}
var noChildren = []

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName
    this.properties = properties || noProperties
    this.children = children || noChildren
    this.key = key != null ? String(key) : undefined
    this.namespace = (typeof namespace === "string") ? namespace : null

    var count = (children && children.length) || 0
    var descendants = 0
    var hasWidgets = false
    var hasThunks = false
    var descendantHooks = false
    var hooks

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName]
            if (isVHook(property)) {
                if (!hooks) {
                    hooks = {}
                }

                hooks[propName] = property
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i]
        if (isVNode(child)) {
            descendants += child.count || 0

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true
            }

            if (!hasThunks && child.hasThunks) {
                hasThunks = true
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true
            }
        } else if (!hasWidgets && isWidget(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true
            }
        } else if (!hasThunks && isThunk(child)) {
            hasThunks = true;
        }
    }

    this.count = count + descendants
    this.hasWidgets = hasWidgets
    this.hasThunks = hasThunks
    this.hooks = hooks
    this.descendantHooks = descendantHooks
}

VirtualNode.prototype.version = version
VirtualNode.prototype.type = "VirtualNode"

},{"./is-thunk":56,"./is-vhook":57,"./is-vnode":58,"./is-widget":59,"./version":60}],62:[function(require,module,exports){
var version = require("./version")

module.exports = VirtualText

function VirtualText(text) {
    this.text = String(text)
}

VirtualText.prototype.version = version
VirtualText.prototype.type = "VirtualText"

},{"./version":60}],63:[function(require,module,exports){

},{}]},{},[34])
